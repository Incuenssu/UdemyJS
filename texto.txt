Mozilla tutorial
    https://developer.mozilla.org/es/docs/Web/JavaScript

Cosas interesantes que saber
    const numNeighbours = prompt('How many neighbour countries does your country have?')
        Aparece un recuadro con la pregunta y guarda la variable en numNeighbours
    Si queremos quedarnos con solo 2 decimales en una cuenta usamos toFixed(Decimales)
        let n = (1441/7900)*100     Resultado: 18.240506329113924
        n = n.tofixed(2)            Resultado: 18.24
        console.log(percentageOfWorld1(population).toFixed(4))
    Para mover una linea hacia abajo/arriba en VS usamos ALT y la flecha abajo/arriba
    CONST es solo invariable para primitives(Primitive values) pero si son objetos(Reference values) si que podemos cambiar su valor.
        Primitives vs objects (primitive vs reference types)
    Metodo entries
        Es un array dentro de un array que contiene el valor y su posicion
            const array = ["Array1", "Array2", "Array3"]
            console.log([...array.entries()])
                [0, "Array1"]
                [1, "Array2"]
                [2, "Array3"]
        Ejemplo en For-Of en tema 09
    Timer. Tras unos milisegundos, se ejecutará una funcion
        setTimeout(FUNCION, MILISEGUNDOS);
        Tras 1000 milisegundos(1segundo), se ejecutará el console.log
        setTimeout(function() {console.log('Timer')}, 1000);
    When create a event listenin in a button, the web recharge, to prevent it:
        function(e){ e.preventDefault(); }
    Para modificar propiedades del CSS desde JS
        document.querySelector(" . # ").style.PROPIEDAD = VALOR
        document.querySelector(".textoPrincipal").style.opacity = 100
    Para zonas de texto usamos TEXTCONTENT
        document.querySelector(" . # ").textContent = "Texto nuevo"
    Para zonas donde el usuario puede escribir usamos VALUE
            document.querySelector(" . # ").value = "texto escrito"
        ++ incrementa el valor en 1 pero sigue devolviendo el valor previo si se pone detras, si se pone delante funciona correctamente
            let a = 10
            console.log(a++)                // Resultado: 10
                console.log(a)              // Resultado: 11
            console.log(++a)                // Resultado: 11
        Es mejor usar un link en vez de un boton para llamar a un modal, asi ira hacia donde queramos: top page, botton page, etc. Y asi evitamos problemas.
            <a class="nav__link nav__link--btn btn--show-modal" href="#"> Open account </a>
        getComputedStyle
            Para saber las propiedades del elemento incluso en el archivo css
        ":root{}" es el equivalente en CSS a "document." en JS
    Color random
        const randomInt = (min, max) =>
            Math.floor(Math.random() * (max - min + 1) + min);
        const randomColor = () =>
            `rgb(${randomInt(0, 255)},${randomInt(0, 255)},${randomInt(0, 255)})`;
        randomColor(0,255)
    Ver que ocasiona un evento: addEventListener("click", function(e){
        console.log( e.target ) })
    Para llevar a una seccion cuando se clicka un boton
        <a href="#section1"> Navegacion </a>        // id="section1"
    Barra de navegacion suave
        document.querySelector(PARENT).addEventListener('click', function (e) {
            e.preventDefault();
            const clicked = e.target.classList.contains(CHILD);
            if (!clicked) return;
            document
                .querySelector(e.target.getAttribute('href'))
                .scrollIntoView({ behavior: 'smooth' });
        });
    querySelector busca hijos no importa lo profundos que esten
    closest busca padres no importa lo profundos que esten
    Hover
        El opuesto a mouseenter is mouseleave
        El opuesto a mouseover is mouseout
    Funcion para hacer semitransparente el resto de botones de navegacion cuando Hover. (Passing arguments to event handlers)
        const nav = document.querySelector('.nav');
        const handleHover = function (e) {
            if (e.target.classList.contains('nav__link')) {
                const link = e.target;
                const siblings = link.closest('nav').querySelectorAll('.nav__link');
                const logo = link.closest('.nav').querySelector('img');
                siblings.forEach(el => {
                    if (el !== link) el.style.opacity = this;
                    logo.style.opacity = this;
                });
            }
        };
        nav.addEventListener('mouseover', handleHover.bind(0.5));
        nav.addEventListener('mouseout', handleHover.bind(1));
    Sticky navigation barra En el CSS le aplicamos el estilo
        .nav.sticky {
            position: fixed;
        }
    Para hacer aparecer y desaperecer cosas cuando pasan por un determinado punto
        Creacion
            const observer = new IntersectionObserver(observerCallBack, observerOptions);
            const navHeight = qs(".nav").getBoundingClientRect().height;
        Funcion
            const observerCallBack = function (entries) {
                const [entry] = entries;
                if (!entry.isIntersecting) qs(".navbar").classList.add('sticky');
                else qs(".navbar").classList.remove('sticky');
            };
        Opciones
            const observerOptions = {
                root: null,
                threshold: 0,
                rootMargin: `-${navHeight}px`,
            };
        Llamando al observador
            observer.observe(qs('.header'));
    Crear clases en JS
        function CLASE (PARAMETRO1, PARAMETRO2, etc){
            this.PARAMETRO1 = PARAMETRO1
            this.PARAMETRO2 = PARAMETRO2
            ...
        }
        Para crear los metodos que heredaran de la clase se usan los prototipos
            CLASE.prototype.METODO = function () {}
        Para usar los metodos heredados de la clase
            OBJETO.METODO(PARAMETROS)
    GIT
        Primero creamos una branch(rama) para luego juntamos la branch con la master
            Creamos branch
                git branch NOMBRE ==> se crea en mi maquina
            Vamos a ir a la branch creada
                git checkout NOMBRE ==> cambiamos a la branch donde trabajaremos
                git branch ==> vemos todas las branch que estan en mi maquina
                git branch -a ==> vemos todas las branch, de mi maquina y del server
            Para guardar los datos modificados en mi branch, no en el main
                git push -u origin NOMBRE
            Unir mi branch con el master
                git checkout master ==> Pasamos a la branch master
                git pull origin master ==> para asegurarnos que tenemos la ultima version
                git branch --merged  ==> nos muestra las branch que hemos mezclado hasta ahora
                git merge NOMBRE  ==> Mezclamos mi branch con el master
                git push origin master ==> Subimos los cambios al servidor
            Borrar branch, cuando no se vaya a usar
                git push origin --delete NOMBRE ==> borrado del repositorio externo, del servidor
                git branch -d NOMBRE ==> borrado del repositorio de mi maquina
            Resumen
                1. Bajamos el codigo
                2. Creamos una branch para trabajar y no modificar master
                3. Trabajamos
                4. Mezclamos mi branch con el master
                5. Subimos el master
        Errores de codigo y volver atras
            git checkout NOMBREARCHIVO  ==> Resetea el codigo y lo deja sin la ultima modificacion
        Ver archivos modificados
            git log --stat
        Mover un commit de una branch a otra(hemos commiteado en la master en vez en mi branch)
            1. Copiar el commit ID
            2. git checkout BRANCH
            3. git cherry-pick COMMIT ID ==> Copiamos el commit a mi branch
            4. git checkout master
            5. git reset ==> Para eliminar el commit de la master
        Ver todos los commits
            git reflog
    API de terceros
        CDN: Content Delivery Network
        Is better use NPM
        Hoisted APIs we put in HTML BEFORE our own script
    All the variable that are in global script, are avaiable for all the other scripts.
    En JS moderno no se usa IF-ELSE, se usa mucho mas varios IFs. Queda mas claro
    Si queremos que prettier ignore la siguiente linea usamos
        // prettier-ignore
        Ejemplo con prettier-ignore
            // prettier-ignore
            const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
        Ejemplo sin prettier-ignore
            const months = [
                'January',
                'February',
                'March',
                'April',
                'May',
                'June',
                'July',
                'August',
                'September',
                'October',
                'November',
                'December',
            ];
    Para generar una palabra con la primera letra en mayuscula
        const minuscula = "palabra"
        const mayuscula = `${minuscula[0].toUpperCase()}${minuscula.slice(1)}`
    Para guardar datos (cookies) usamos localStorage
    Para convertir un objeto a string usamos JSON
        JSON.stringify()
    Recargar la pagina
        location.reload();
    Web con un monton de APIs publicas
        https://github.com/public-apis/public-apis
    CORS
        Cross Origin Resource Sharing
        Sin CORS no podemos acceder a APIs de terceros desde nuestro codigo
    Obtener objetos de un array
        Si tenemos un array con varios objetos en su interior, podemos sacar cada objeto por separado
        array = [Objeto1, Objeto2, etc]
        const [OB1, OB2, etc] = array
        DOnde OB1 = { lo que este dentro de Objeto1 }
    El codigo que es dificil de entender es mal codigo porque conyeva a mas bugs
    Babel: programa para transformar a ES5
    NPM
        Inizializar NPM
            Guarda todos los paquetes usados y lleva un control de versiones. Crea un JSON
            npm init
        Instalar librerias
            npm i NOMBREPAQUETE
            Crea una carpeta "node_modules" donde guarda todas las librerias usadas
        Compartir proyecto
            Si queremos compartir nuestro proyecto o cambiar de PC, no debemos enviar la carpeta "node_modules"
            NPM automaticamente lee e instala las liberias necesarias gracias al JSON
    Mirar PARCEL y NPM Scripts para mixear y comprimir librerias en un unico archivo
        Instalar Parcel
            npm i parcel-bundler --save-dev
            npm i parcel --save-dev
        NPM Scripts
            Se escriben en el archivo JSON creado por NPM, en la parte de scripts
            Nos permiten acceder desde la terminal a ordenes complejas pero de forma simple
            Por ejemplo, para mixear todas las librerias utilizadas en un solo archivo, pero con codigo no usado
                En el JSON escribimos
                "scripts": {
                    "start": "parcel index.html",
                },
                Accedemos al script desde la terminal
                npm run start
            Por ejemplo, para comprimir, mixear todas las librerias y eliminar el codigo no usado
                En el JSON escribimos
                "scripts": {
                    "build": "parcel build index.html"
                },
                Accedemos al script desde la terminal
                npm run build
        Hot module replacement
            Escribimos el nuestro script.js lo siguiente
            if (module.hot) { module.hot.accept() }
            Es una orden que solo entiende Parcel, no aparecera en el codigo final
            Lo que hace es que cada vez que hagamos un cambio en el script, no recarga la pagina, solo modifica lo que hemos escrito
        Usando Parcel no es necesario escribir toda la URL para acceder a las librerias, las busca autoamticamente
            import cloneDeep from './node_modules/lodash-es/cloneDeep.js';
            import cloneDeep from 'lodash-es';
    Transformar a ES5
        Parcel lo hace de forma automatica pero solo la sintaxis como transformar arrow function en functions normales
        Para todo lo demas debemos instalar e importar las siguientes librerias
        npm i core-js               Para metodos como find o Promise
        import 'core-js/stable/array/find' (Solo las que usemos y no todas para mejor rendimiento)
        npm i regenerator-runtime   Para funciones asincronas
        import 'regenerator-runtime/runtime'
    Como escribir codigo
        Código limpio
            Escribir código para que otros puedan entenderlo
            Escriba código para que pueda entenderlo en 1 año
            Evitar soluciones demasiado "inteligentes" y complicadas
            Utilice nombres de variables descriptivos: lo que contienen y lo que hacen
        Generalidades
            Utilice el principio DRY (refactorice su código)
            No contamine el espacio global, encapsule en su lugar
            No utilice "var"
            Utilice comprobaciones de tipo fuertes (=== y !==)
        Funciones
            Generalmente, las funciones deben hacer sólo una cosa
            No utilice más de 3 parámetros en la función
            Utilice parámetros por defecto siempre que sea posible
            Por lo general, devuelva el mismo tipo de datos que recibió
            Utilizar Arrow Functions hace el código más legible
        OOP
            Utilizar clases ES6
            Encapsular los datos y no mutar desde fuera de la clase
            Implementar method chaining
            No usar Arrow FUnctions como métodos (en objetos regulares)
        Evitar el código anidado (una funcion dentro de otra y de otra y de otra...)
            Utilizar return anticipado (tambien llamado "Guard Clauses")
                if (!id) return;
            Utilizar operadores ternarios (condicionales) o lógicos en lugar de if
            Utilizar múltiples if en lugar de if/else-if
            Evitar los bucles for, utilizar métodos de array
            Evite las APIs asíncronas basadas en callbacks
        Código asíncrono
            Consuma promesas con async/await para una mejor legibilidad
            Siempre que sea posible, ejecute las promesas en paralelo (Promise.all)
            Gestionar los errores y los rechazos de las promesas
    Seleccionar todas las palabras con el mismo nombre
        Command + D
    En vez de usar FOR loop usar map() que funciona igual para arrays
        for (let i = 0; i < arr.lenght; i++)
            doubled[i] = arr[i] *2;
        const doubled = arr.map(n => n * 2)
    Paradigmas imperativos y declarativos
        Imperativos
            Como hacer las cosas
            Ejemplo: paso por paso para hacer una tarta
            Ejemplo:
                const arr = [2, 4, 6, 8];
                const doubled = [];
                for (let i = 0; i < arr.lenght; i++)
                    doubled[i] = arr[i] *2;
        Declarativos
            Que hacer
            Ejemplo: descripcion de la tarta ==> Pero es necesario acudir al paso por paso para hacer la tarta
            Ejemplo:
                const arr = [2, 4, 6, 8];
                const doubled = arr.map(n => n * 2)
    Principios de programacion funcional
        Paradigma de programacion declarativo
        Basado en la idea de escribir codigo combinando "funciones puras", y evitando "efectos secundarios" y evitando mutar datos
            Efectos secundarios: modificacion o mutacion de datos fuera de la funcion
            Funciones puras: funciones sin efectos secundarios. No dependen de variables externas.
            Inmutabilidad: Los datos nunca son modificados! En vez de eso, los datos son copiados y modificada la copia y devuelta
                Object.freeze()
                const arr = Object.freeze({name: "Jose", age: "23"})
        Ejemplo de programacion functional
            React
        Tecnicas de programacion funcional
            Evitar mutaciones de datos
            Usar metodos que no produzcan efectos secundarios
            Hacer transformacion de datos con metodos como map(), filter() o reduce()
            Intentar evitar efectos secundarios, aunque muchas veces no se puede evitar
        Sintaxis declarativa
            Usar array and object destructuring
            Usar spread operator (...)
            Usar el operador ternario
            Usar template literals
SASS
    Una forma mejor de escribir CSS
    Tiene mejoras con respecto a CSS
    Es una mejor opcion para escribir largas cadenas de CSS y es mucho mas sencillo
    Los navegadores aun no entienden SASS, es necesario convertirlo a CSS mediante Parcel
Inicio proyecto NPM
    1. Iniciar npm
        npm init
    2. Escribir los scripts en "package.JSON"
        "scripts": {
            "start": "parcel index.html",
            "build": "parcel build index.html"
        },
    3. Instalar Parcel
        npm i parcel
    4. Iniciar Parcel
        npm run start
Hash
    Todo lo que viene despues de la URL pura se llama "HASH"
    forkify-v2.netlify.app/#5ed6604591c37cdc054bc886
    El hash seria
        #5ed6604591c37cdc054bc886
    Para obtener el hash (No queremos el #)
        const id = window.location.hash.slice(1);
    El cambio del hash es un evento que podemos escuchar
        window.addEventListener("hashchange", function(){})
Si tenemos varios listeners que llamen a la misma funcion podemos usar un array y simplificar la llamada
    Varios listeners
        window.addEventListener('hashchange', showRecipe);
        window.addEventListener('load', showRecipe);
    Lo mismo pero en una linea con array
        ['hashchange', 'load'].forEach(e => window.addEventListener(e, showRecipe));
Normalmente se usan dos archivos para parametros y funciones que se usaran continuamente
    config.js ===> Usado para establecer las propiedades constantes que se usaran continuamente
    helpers.js ===> Usado para establecer las funciones que se usaran continuamente
    Se usan las letras mayusculas para variables o funciones que no cambian nunca ==> Archivo "config.js" o archivo "helpers.js"
Revisar: Publisher-Suscriber pattern 
Obtener los datos de un formulario
    Para obtenerlo como Array
        const dataArray = [...new FormData(this)];      // Resultado: [ ["title","Plato1"], ["sourceUrl","URL"] ]
    Para transformar el Array en un objeto
        const data = Object.fromEntries(dataArray);     // Resultado: { title: "Plato1", sourceUrl: "URL" }
    Para el siguiente formato de HTML
        <div class="overlay hidden"></div>
        <div class="add-recipe-window hidden">
            <button class="btn--close-modal">&times;</button>
            <form class="upload">
                <div class="upload__column">
                    <h3 class="upload__heading">Recipe data</h3>
                    <label>Title</label>
                    <input value="TEST" required name="title" type="text" />
                    <label>URL</label>
                    <input value="TEST" required name="sourceUrl" type="text" />
                    <label>Image URL</label>
                    <input value="TEST" required name="image" type="text" />
                    <label>Publisher</label>
                    <input value="TEST" required name="publisher" type="text" />
                    <label>Prep time</label>
                    <input
                        value="23"
                        required
                        name="cookingTime"
                        type="number"
                    />
                    <label>Servings</label>
                    <input value="23" required name="servings" type="number" />
                </div>

                <div class="upload__column">
                    <h3 class="upload__heading">Ingredients</h3>
                    <label>Ingredient 1</label>
                    <input
                        value="0.5,kg,Rice"
                        type="text"
                        required
                        name="ingredient-1"
                        placeholder="Format: 'Quantity,Unit,Description'"
                    />
                    <label>Ingredient 2</label>
                    <input
                        value="1,,Avocado"
                        type="text"
                        name="ingredient-2"
                        placeholder="Format: 'Quantity,Unit,Description'"
                    />
                    <label>Ingredient 3</label>
                    <input
                        value=",,salt"
                        type="text"
                        name="ingredient-3"
                        placeholder="Format: 'Quantity,Unit,Description'"
                    />
                    <label>Ingredient 4</label>
                    <input
                        type="text"
                        name="ingredient-4"
                        placeholder="Format: 'Quantity,Unit,Description'"
                    />
                    <label>Ingredient 5</label>
                    <input
                        type="text"
                        name="ingredient-5"
                        placeholder="Format: 'Quantity,Unit,Description'"
                    />
                    <label>Ingredient 6</label>
                    <input
                        type="text"
                        name="ingredient-6"
                        placeholder="Format: 'Quantity,Unit,Description'"
                    />
                </div>

                <button class="btn upload__btn">
                    <svg>
                        <use href="src/img/icons.svg#icon-upload-cloud"></use>
                    </svg>
                    <span>Upload</span>
                </button>
            </form>
        </div>
Transformar un Array en un Objeto
    const listaA = []
    const listaO = Object.fromEntries((lista)
Transformar un Objeto en un Array
    const listaO = {}
    const listaA = Object.entries(listaO)
sfsdfsdf




---------------------- FUNDAMENTOS JS PARTE 1 ----------------------

How to use modern JS today
    ES5
        fully supported in all browsers (down to IE9 from 2011)
        Ready to be used today
    ES6/ES2015 to ES2020
        ES6+: well supported in all modern browsers
        No support in older browsers
        Can use most features in production with transpiling and polyfilling(Babel)
        Compatibility table: https://kangax.github.io/compat-table/es6/
    ES2021
        ESNext: future versions of the language (new feature proporsals that reach stage 4)
        Can already use some features in production with transpiling and polyfilling
    En este curso aprenderemos ES6 pero hay algunas cosas que saber en ES5(por ejemplo en ES5 se usaba var y en ES6+ se usa let y const).
        Es necesario para saber como funciona JS mejor
        Muchos tutoriales estan en ES5
        Cuando trabajemos en codebases antiguas, deben estar escritas en ES5

7 Primitive Data Types. But JS automatic detect the type of data of the value stored in a variable.
    Number: floating point number.
    String: sequence of characters.
    Boolean: true or false.
    Undefined: value taken by a variable that is not yet defined.
    Null: also means 'empty value'
    Symbol(ES2015): value that is unique and cannot be changed.
    BigInt (ES2020): larger integers than the number type can hold
    Podemos descubrir el tipo de data usando typeof
        typeof true     Resultado: Boolean

let, const and var
    Let(ES6): Variable that changes in future.
        let age;
        let age = 30;
    Const(ES6): Variable that will not change in the future.
        const birthYear = 1990;
        NOT ALLOWED const birthYear;
    Var: old way to define variables. Same use like "let"

Operators
    + - * / = !=
    Exponential(**): 2 ** 3 -> 2*2*2
    Contracciones(+=): por ejemplo x = 15;
        x += 10; x = 25
        x *= 2; x = 50
        x++; x= 51
    Comparison
        < <= > >=

Strings
    Ejemplo:
        const name = "Jonas";
        const year = 2021;
        const birthYear = 1990;
    Podemos concatenar strings
        const presentation = "I'm " + name + " and I have " + (year - birthYear) + " years old";
    Pero tambien podemos concatenar strings asi
        const newpresentation = ´I'm ${name} and I have ${year - birthYear} years old´
        OJO que no son ni "dobles" ni 'simples', es la de debajo del `exponencial`

Type Conversion and Coercion
    Conversion
        manually convert from one type to another
            const inputYear = '1990';
            console.log(inputYear + 18);                    Resultado: 199018
            console.log(Number(inputYear), inputYear)       Resultado: 1990 "1990"
            console.log(Number(inputYear) + 18)             Resultado: 2008
            console.log(Number('Jonas'))                    Resultado: NaN
    Coercion
        JS automatically converts types behind the scenes for us
            console.log('I am ' + 30 + ' years old')        JS transform "23" into a String
            console.log('23' - '10' - 3)                    Resultado: 10
            console.log('23' + '10' + 3)                    Resultado: 23103
            console.log('23' * '2')                         Resultado: 46
            console.log('23' > '18')                        Resultado: true
            Funciona para todos los operadores el cambio de string a number menos para la suma "+"
            let n = '1' + 1;    // 11
            n = n - 1;          // 10
            '10' - '4' - '3' - 2 + '5'      //15

Boolean Operators
    AND : &&
    OR : ||
    NOT : !== 
        bool = true; 
        !bool = false;

Switch Statement
    Se usa como IF pero cuando hay muchos casos, y en vez de usar ELSE IF continuamente usamos el esquema Switch
    Switch(day){
        case "monday":  // day === "monday"
            console.log("On monday, plan course structure.")
            console.log("Go to coding")
            break         Sin el break, el codigo continua ejecutandose. Si lo quitamos este break se ejecutaria monday y tuesday
        case "tuesday":
            console.log("On tuesday, ...")
            break
        case "wednesday":
        case "thursday":            //Si ponemos esta estructura de dos case seguidos, para ambos se ejecuta el console.log
            console.log("On wednesday and thursday, ...)
            break
        default:
            console.log("Para cuando no se cumple ningun caso")
    }
    Cada dia se usa menos, pero en ocasiones es mejor usarlo

Statement and Expresions
    Expresions: producen values. No generan acciones.
    Statements: no producen values. Generan acciones.
        if (23<10){                             Todo el if es un Statement
            const str = "23 isn't bigger"       Esto tambien es un Statement, pero el "23 isn't bigger" es una Expresion. y str tambien es una expresion
        }
    Es importante saber la diferencia porque JS permite usar Statements y Expresions o no.
        Ejemplo:
            console.log(`i am ${2020 - 1990} years old.`)                               Permitido
            console.log(`i am ${if(2020 > 1990) {const edad = "30"}} years old.`)       No permitido
    
The Conditional/Ternary Operator
    Is the same than IF/ELSE but all in one line
        const age = 30
            // Condicion ? "what happen if TRUE" : "what happen if FALSE"
        age >= 18 ? console.log("I can drive.") : console.log("I can't drive.")
    La forma de usar el condicional realmente es:
        const drive = age >= 18 ? "can" : "can't"
        console.log(drive)
    Con IF/ELSE quedaria
        let drive
        if (age > 18){
            drive = "can"
        } else {
            drive = "can't"
        }
        console.log(drive)
    Pero como el Conditional es una expresion podemos aprovecharnos de ello
        console.log(`I ${const drive = age >= 18 ? "can" : "can't"} drive.`)
    

---------------------- FUNDAMENTOS JS PARTE 2 ----------------------

Strict mode
    It is a mode that will can enable in JS, it makes more secure write code
    To activate it, in the first line of the JS archive we write
        'use strict'
    It can be enabled and disabled for pieces of code
    Make it easier for us developers to avoid accidental errors. Help us introduce bus into our code.
        Stric mode forbids us to do certain things
        It will actually create visible errores for us in certain situations in wich without strict mode JS will simply fail silently.
    Example:
        let hasDriversLicense = false
        const passTest = true
        if (passTest) hasDriverLicense = true
        if (hasDriversLicense) console.log("I can't drive.")        Resultado: Nothing appears and no error is displayed
    Example 2:
        'use strict'
        let hasDriversLicense = false
        const passTest = true
        f (passTest) hasDriverLicense = true
        if (hasDriversLicense) console.log("I can't drive.")        Resultado: Appear an error in the console
    Strict mode also reserve some words
        let interface
        let private
        let if

Functions
    It is a piece of code that can be used over and over again in our code
    Creation function
        FUNCTION name (parameters) {}
        function loggger () {console.log("Hi")}
    Calling / running / invoking function
        NAME()
        logger()
    The functions have return of values
        function fruitProcessor(apples, oranges) {
            const juice = `Juice with ${apples} apples and ${oranges} oranges.`
            return juice
        }
        const applejuice = fruitProcessor(5, 4)     //We need to save the return in a variable or use directly, not calling the return.
        console.log(juice)                          Resultado: Error
        console.log(applejuice)                     Resultado: Juice with 5 apples and 4 oranges.
        console.log(fruitProcessor(9, 41))           Resultado: Juice with 9 apples and 41 oranges.

Function expresion and declaration
    Function declaration
        function calcAge1(birthYear){
            return 2020 - birthYear
        }
        const age1 = calcAge1(1990)
        console.log(age1)
    Function expresion
        const calcAge2 = function (birthYear){
                            return 2020 - birthYear
                         }
        const age2 = calcAge2(1990)
        console.log(age2)
    In declaration we can call first the variable and later the function, in expresion we can't do it
        const age2 = calcAge2(1990)
        const calcAge2 = function (birthYear){
                            return 2020 - birthYear
                         }
        Resultado: It don't works
        const age1 = calcAge1(1990)
        function calcAge1(birthYear){
            return 2020 - birthYear
        }
        Resultado: It works
    In practice, we can use both of them, it depends on the preference of the developer

Arrow functions
    Is a special form of function expression that is shorter and faster to write.
    Normal function:
        const calcAge2 = function (birthYear){
            return 2021 - birthYear
        }
    Arrow function:
        const calcAge3 = birthYear => 2021 - birthYear
        const age3 = calcAge3(1990)
        console.log(age3)
    If we need more complexity
        const yearsUntilRetirement = (birthYear, firstName) => {
            const age = 2021 - birthYear
            const retirement = 65 - age
            return `${firstName} retires in ${retirement} years`
        }
        console.log(yearsUntilRetirement(1990, "Jose Luis"))
    
Calling other Functions
    Example:
        let cutFruitPiece = fruit => fruit * 4
        function fruitProcessor (apples, oranges){
            const applePieces = cutFruitPiece(apples)       //applePieces = 2 * 4
            const orangePieces = cutFruitPiece(oranges)     //orangePieces = 3 * 4
            const juice = `Juice with ${applePieces} piece of apple and ${orangePieces} pieces of orange.`
            return juice
        }
        console.log(fruitProcessor(2,3))

Arrays
    Creation
        const friends = ["Jose Luis", "Pepito", "Pedro", "Horse Lluis"]
        const years = new Array (1990, 1991, 1992, 1993)
    Calling Arrays
        friends[0]
        years[3]
    Complexity
        const me = ["John", "Perez", 2021 - 1985, friends]      Array inside of a Array
    With functions
        const years = [1990, 1991, 1992, 1993]
        const calcAge = function (birthYear){
            return 2021 - birthYear
        }
        const ages = [calcAge(years[0]), calcAge(years[1]), calcAge[years(years.length])]
    Adding elements to the Array
        frients.push("Antonio")         Antonio is added to the end of the array
        friends.unshift("Pedrito")      Pedrito is added to the beginning of the array
    Removing elements to the Array
        friend.pop()                    The last element of the array will be removed
            const popped = years.pop()      Resultado(console.log): 1993
        friends.shift()                 The first element of the array will be removed
    Finding an element in the array
        friends.indexOF("Pepito")       Resultado(c.l): 1
        friends[friends.indexof("Pepito)] = "Pepe"

Objects
    structure
        const jonasArray = {
            //propierty : value
            firstName : "Jonas",
            lastName : "Perez",
            Age : 2021 - 1991,
            Job : "Teacher",
            Friend : ["Michael", "Peter", "Steven"]
        }
    Creating objects with functions
        const funcion = function (nombre, apellido, edad) {
            const objeto = {
                firstName: nombre,
                lastName: apellido,
                age: edad
            }
        return objeto
        }
        const persona = funcion("Antonio", "Gonzalez", 55)       Resultado: const objeto = {firstName: "Antonio", lastName: "Gonzalez", age: 55}
    DOT vs BRACKET notation
        DOT
            persona.name                         Resultado: Antonio
        BRACKET
            persona["name"]                      Resultado: Antonio
            Inside the brackets we can use any expresion.
                const nameKey = "Name"
                persona.["first" + nameKey]         Resultado: Antonio
                persona.["last" + nameKey]          Resultado: Gonzalez
                persona."first" + nameKey           Resultado: error
            Using brackets and prompt
                const interestedIn = prompt("What do you want to know about the person? Choose between fistName, lastName, age and friends")
                console.log(persona.interestedIn)           Resultado: Error
                console.log(persona[interestedIn])          Resultado(age): 55

Objects methods
    Any function that is attached to an object is called a "METHOD". Consists in use functions in objects
        const jonas = {
            firstName : "Jonas",
            lastName : "Perez",
            birthYear: 1992,
            hasDriversLicense: true,
        --> calcAge: function(birthYear){
                return 2021 - birthYear
            }
        }
    Accesing to the method
        jonas.calcAge(1991)
        jonas["calcAge"](1991)
    Accesing to the method with parameters inside the object
        const jonas = {
            firstName : "Jonas",
            lastName : "Perez",
            birthYear: 1992,
            hasDriversLicense: true,
        --> calcAge: function(){
                return 2021 - this.birthYear        //We use the word "THIS" to use a propierty inside the same object
            }
        }
    It is posible to use the name of the object instead of "this" but is not recomendable at all
        const jonas = { calcAge: function(){ return 2021 - jonas.birthYear } }
    Instead of calculate again and again the method, is better to calculate once and save in a variable inside the object
        const jonas = {
            firstName : "Jonas",
            lastName : "Perez",
            birthYear: 1992,
            hasDriversLicense: true,
        --> calcAge: function(){
                this.age = 2021 - this.birthYear
                return this.age
            }
        }
    --> Be carefull, it is necesary first call the method and later we can call the return
        console.log(`The age of Jonas is ${jonas.age}`)             Resultado: The age of Jonas is Undefined
        jonas.calcAge()
        console.log(`The age of Jonas is ${jonas.age}`)             Resultado: The age of Jonas is 29
        console.log(`Jonas need work ${65 - jonas.age} years to retires`)

The FOR loop
    FOR loops keeps running while condition is TRUE
    Structure 
        for (let i = 0 ; i <= 10 ; i++){
            console.log(`What ever ${i}`)
        }
    Arrays
        for (let i = 0 ; ; i++){
            console.log(friends[i])
        }
        const numbers = [1, 2, 4, 56, 67, "numero", 128]
        let percentages = []
        for (let i = 0; i < numbers.length; i++) {
            percentages[i] = (numbers[i]/6)*100
                    The same is:
            percentages.push( (numbers[i]/6)*100 )
        }
    Continuing
        for (let i = 0; i < numbers.length; i++) {
            if (typeof numbers[i] === 'string') continue            //When number is a string, the loop continue but pass next.
            percentag[i] = (numbers[i] / 6) * 100
            console.log(number[i])                                  Resultado: 1, 2, 4, 56, 67, 128
        }
    Breaking
        for (let i = 0; i < numbers.length; i++) {
            if (numbers[i] == 4) break                  //When number = 4, the loop not continue
            percentages[i] = (numbers[i]/6)*100
            console.log(number[i])                      Resultado: 1, 2
        }
    Loop inside a loop
        for (let i = 1; i < 3; i++) {
            console.log(`Exercise ${i}`)
            for (let j = 1; j < 5; j++) {
                console.log(`Lifting repetition ${j}`)
            }
        }
    Backwards
        for (let i = 10; i > 7; i--) {
            console.log(i)                  Resultado: 10, 9, 8
        }

The WHILE loop
    Structure
        let rep = 1
        while (rep <= 10){
            console.log(`WHILE: Lifting repetition ${rep}`)
            rep++
        }
    WHILE loop is more versatile than FOR loop


---------------------- DEVELOPER SKILLS AND EDITOR SETUP ----------------------

Prettier
    on save, prettier apply formats like ";"
    It can be configurated creating a file called ".pretierrc" and putting settings like:
        {
            "tabWidth": 4,
            "singleQuote": true,
            "arrowParens": "avoid"
        }

Snippets
    Is a file where we can configure shortcuts like "console.log()" by ""
    Creating
        Preferences
        User Snippets
        New Global Snippets file
            We choose a name
    Structure
        "Print to console": {                           // Name of the Snippet
            "scope": "javascript,typescript",           // Used in
            "prefix": "cl",                             // When we type "cl" the snippet will be enabled
            "body": ["console.log($1);"],               // The reference of the snippet. "$1": put the cursor in this site 
            "description": "Log output to console"      // Description
        }
        
Settings Sync
    To Synchronice Setting along differents PCs or users

Live Server
    We can use a VS extension or use NodeJS wich is more professional, using npm package called Live Server
    1. Is necesary install NodeJs (google it and install)
    2. In terminal we write
        sudo npm install live-server -g
        live-server

Coding Challenges
    https://www.codewars.com
    Thousands of coding challenges

Problem solver
    1. Make sure you 100% understand the problem.
        Ask the right questions to get a clear picture of the problem.
    2. Divide and conquer
        Break a bif problem into smaller sub-problems
    3. Don't be afraid to do as much research as you have to.
        Google, Stack Overflow, MDN web docs.
    4. For bigger problems, write pseudo-code before writing the actual code.
        It's like code for humans to understand, not computers. It's not even JS, just schematic.

Debugging
    Find and fixing errors
    Software bug: defect or problem in a computer program. Basically, any unexpected or unintended behavior of a computer program is a software bug.
    Bugs are completely normal in software devvelopment
    Debugging: process of finding, fixing and preventing bugs.
    Debugging process
        Identify: becoming aware that there is a bug
            During development
            Testing software
            User reports during production
            Context: browsers, users, etc.
        Find: isolating where exactly the bug is happening in code
            Developer console (simply code)
            Debugger (complex code)
        Fix: correct the bug
            Replace wrong solution with new correct solution
        Prevent: preventing it form happening again
            Searching for the same bug in similar code
            Writing test using testing software

Debugging using the console
    Consist in prove and error

Debugger
    We use Chrome Inspect tool
        Click in Sources and user breakpoints: the breakpoints stops the JS code when we want and we can go step by step looking the code


---------------------- JS IN THE BROWSER: DOM AND EVENTS FUNDAMENTALS ----------------------

DOM
    Document Object Model: structured representation of HTML documents. Allows JS to access HTML elements and styles to manipulate them.
    We change text, change HTML attributes and even CSS styles.
    The DOM is bassically a conexion between HTML documents and JS code.
    The DOM is automatically created as soon as the browsers loads the HTML page and stores in a tree structure, and each of them is an object.
        <head>
            <section>
                <p>
                </p>
                <p>
                </p>
            </section>
        </head>
    DOM methods and propierties for DOM Manipulation (for example document.querySelector()) ARE NOT PART OF JS
    DOM methods and propierties (web API: application Programming Interface) CAN INTERACT WITH JS

Select the element
    document.querySelector('.message') ". and later we can write propierties"
    document.querySelector('#mensaje')
    
Event Listener
    .addEventListener(
        'click',                                        // It is necesary tell that the triggers the listener
        function () { console.log("Valor") }            // And what happen when the event is activated
        );
    const unaFuncion = function () {}
    .addEventListener('click', unaFuncion);
    Types of keyboard events
        KeyDown     ASA the key is pressed
        KeyUp       Once we put out the finger
        KeyPress    Continously

Standards
    In general, we call the classes or the IDs, and we stored this classes in variables, when later we use again and again
        const btn = document.querySelector(".button-show")
    When we use querySelector with multiple classes or elements, only select the first, in than case we use "querySelectorAll"
        const btn = document.querySelectorAll(".button-show")
        Once selected, we can use it similar than an Array
        for (let i = 0; i < btn.length; i++) {
            console.log(btn[i].textContent);
        }
    In real projects, adding and removing classes is the form of manipulation webs.
        This is because added and remove many styles in just one class
    If we need to call a function as soon as JS read/execute the line que put ()
        btn.addEventListener('click', openmodal);          // Wait for the click
        btn.addEventListener('click', openmodal());        // Inmediatly execute "closemodal"
        But, if the function is inside another function, then we write ()
        function(){
            openmodal();
        }
    Most common uses of classes
        btn.classList.add('hidden')
        btn.classList.remove('hidden')
        btn.classList.contains('hidden')
        btn.classList.toggle("hidden")      // If has the class, remove the class. If hasn't the class, added the class

Manipulating CSS styles
    document.querySelector('body').style ". and later the name of the propierty we want manipulate"
    document.querySelector('body').style
                                        .backgroundColor = '#60b347'
                                        .border  = "2px solid #fff"
                                        .fontSize = "25px"

Refactoring
    Eliminate duplicate code
    DRY principle: not repeat code
    Duplicate code:
        when we want to change some functionality, we have to chenge the same code in multiple places
        When we start coding, no big problem to start out with duplicate code
    Refactoring
        Restructure the code but without changing how it works, to improve the code and to eliminate duplicate code.
        1. Indentify duplicate code.

Modal Windows
    They are pop-ups windows, but in the same page, not new blanks.
    Structure
        <div class="modal hidden">                                  // Modal window class   (hidden -> display: none)
              <button class="close-modal">&times;</button>          // Close button
              <h1>I'm a modal window 😍</h1>                        // Title and text in the modal window
              <p>
                Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod
                tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim
                veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea
                commodo consequat. Duis aute irure dolor in reprehenderit in voluptate
                velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint
                occaecat cupidatat non proident, sunt in culpa qui officia deserunt
                mollit anim id est laborum.
              </p>
        </div>
        <div class="overlay hidden"></div>
    CSS
        display: none           // To hidden a element
        display: block          // To show a element in a block window


---------------------- HOW JS WORKS BEHING THE SCENES ----------------------

Deconstructing JS definition
    High-level
        Developers has NOT to manage resources manually(memory), everything is automatic.
    Garbage-collected
        Is basically an algorithm inside the JS engine wich automa removes old, unused objects from the memory.
    Interpreted or just-in-time compiled
        We write words ==> compiling ==> transform 0 and 1 ==> the computer understand only this 0 and 1
        In JS the compiling happens inside the JS engine
    Multi-paradigm
        Paradigm: an approach and mindset of structuring code, wich will direct your coding style and technique
        Three popular paradigms
            Procedural Programming
            Object-oriented Programming (OOP)
            Functional Programming (FP)
        Two different paradigms
            Imperative
            Declarative
    Prototype-based object-oriented
        The templates or the blueprint we use to create objects are the prototypes.
            Prototype
                Array.prototype.push
                Array.prototype.indexOf
            Build from prototype
                const arr = [1,2,3]
                arr.push(4)
                const hasZero = arr.indexOf(0) > 1
    First-class functions
        In a language with first-class functions, functions are simply treated as variables. We can pass them into other functions, and return them from functions.
            const funcion1 = function () {console.log("This is an example")}
            overlay.addEventListener("click", funcion1)
    Dynamic
        No data type definitions. Types becomes known at runtime
            let x = 23
        Data type of variable is automatically changed
            x = "palabra"
        But, if you want to use JS with types, use
            Typescript
    Single-threaded and Non-blocking event loop (Oversimplification!)
        Concurrency model: how the JavaScript engine handles multiple tasks happening at the same time.
        JavaScript runs in one single thread(piece of code), so it can only do one thing at a time.
        But what happen with long-running task? Sounds like it would block the single thread. However, we want non-blocking behavior!
        By using an event loop: takes long running tasks, executes them in the “background”, and puts them back in the main thread once they are finished.

The JS engine and runtime
    JS engine: computer program that executes JS code. Every browsers have his own JS engine. Chrome: V8 Engine with NodeJS
    JS engine contains
        Call Stack
            where our code is executed using something called Execution Context
        Heap
            where the objects are stored. Unstructured. Objects in memory
    Compilation vs interpretation
        Compilation: Entire code is converted into machine code at once, and written to a binary file that can be executed by a computer. Java
            Source code --Step1: Compilation--> Portable file(can be used in any computer): machine code --Step2: execution-->  Program running
                Step2: Can happen way after compilation
        Interpretation: Interpreter runs through the source code and executes it line by line. It is slower than compilated. Old JS
            Source code  --Step1: execution line by line--> Program running
                Step1: Code still needs to be converted to machine code
        Just-in-time (JIT) compilation: Entire code is converted into machine code at once, then executed immediately. Modern JS
            Source code --Step1: Compilation--> (Not Portable file) machine code --Step2: execution-->  Program running
                Step 2 Happens immediately
    Modern Just-in-Time compilation of JS
        Written code --AST--> Parsing --AST--> JiT Compilation ----> Execution ----> Optimization --(Loop during execution)-->JiT Compilation ---->
            AST(abstract syntax tree): representation of our entire code inside the engine
            Happens in special threads that we can’t access from code: Compilation, Execution, Parsing
            Happens in Call Stack: Execution
    JS Runtime in browsers
        Container including all the things that we need to use JS (in this case the browser)
        JS Engine
            Heap
            Call Stack
        Callback queue
            click, timer, data, etc
        Event Loop
            Take que callback queue event and throw it to the call stack
            Essential for non-blocking concurrency model
        Web APIs
            Functionalities provided to the engine, accesible on window object but not part of JS language itself
            DOM, Timers, fetch API, etc
    JS runtime in NodeJS
        Is very similar but since we don't have a browser, we can't have the web API. Instead we have multiple C++ binding and thread pool
        JS Engine
        Callback queue
        Event Loop
        C++ binding & thread pool

Execution context and the call stack
    Once the code is compiled, it execute:
    Execution
        1. Creation of global execution context (for top-level code(means NOT inside a function)). Function body only executed when called
            Execution context: abstract concept.
                Is an environment in which a piece of JavaScript is executed. 
                Stores all the necessary information for some code to be executed.
                Abstact example: pizza in a box
                    Box                     is the execution context for our pizza
                    Pizza                   the JS code to be executed
                    Fork, Knife, plate      things to execute the code
                In all JS projects(no matter how larger it is) has exactly one global execution context (EC)
                    Default context, created for code that is not inside any function (top-level).
        2. Execution of top-level code (inside global EC)
        3. Execution of functions and waiting for callbacks
                One execution context per function: For each function call, a new execution context is created.
    Execution context in detail
    --> What's inside execution context? <---- Generated during "creation phase", right before execution
            Variable environment
                let, const and var declarations
                Functions
                argument(NOT in arrow functions!) object 
            Scope chain
                References to variables that are located outside of the current function
            this keywork (NOT in arrow functions!)
        Example:
            const name = "Jonas"
            const first = () => {
                let a = 1
                const b ) second(7,9)
                a = a+b
                return a
            }
            function second(x,y){
                var c = 2
                return c
            }
            const x = first()
        Analizing example
            Global Execution Context    //literally the function code
                name = "Jonas"
                first = <function>
                second = <function>
                x = <unknown>           // Need to run first() first
            First() Execution context
                a = 1
                b = <unknown>           // Need to run second()
            Second() Execution context
                c = 2
                arguments = [7,9]       // Array of passed arguments. Available in all “regular” functions (not arrow)
        Call Stack      // “Place” where execution contexts get stacked on top of each other, to keep track of where we are in the execution
            second()    // Third Created. First execute
            first()     // Second Created. Second Execute
            Globak      // First Created. Thrid Execute
            The code is read line by line(once at same time: Single-thread) and this is why first declare functions and later we call it
                A function can't be called before created
                    var x = first()
                    const first = function () {console.log("Prueba")}       Resultado: Error
                First we create the function and later we call it
                    const first = function () {console.log("Prueba")}
                    var x = first()                                         Resultado: Prueba

Scope and The Scope Chain
    Definition
        Scoping: How our program’s variables are organized and accessed.
            Scoping ask the questions: “Where do variables live?” or “Where can we access a certain variable, and where not?”
        Lexical scoping: Scoping is controlled by placement of functions and blocks in the code.
            Variables in child function can access to variables in father function
    --> Scope: Space or environment in which a certain variable is declared (variable environment in case of functions).
            There is global scope, function scope, and block scope.
            In the case of functions is the same the scope and the variable environment of execution context.
        Scope of a variable: Region of our code where a certain variable can be accessed.
    Types of scope
        Global scope
            Outside of any function or block
            Variables declared in global scope are accessible everywhere
            Example:
                const x = 1
                const y = 2
                const a = "nombre"
        Function scope
            Variables are accessible only inside function, NOT outside
            Also called local scope
            Example:
                function (){
                    const z = 1
                    h = z + 3
                    return h
                }
                console.log(z)          // Resultado: Error
        Block Scope (ES6)
            Variables are accessible only inside block (block scoped)
            HOWEVER, this only applies to let and const variables!
            Functions are also block scoped (only in strict mode)
            Example:
                if (x < 5 && y = 2){
                    const coord = 25
                    var valor = true
                }
                console.log(coord)      // Resultado: Error
                console.log(valor)      // Resultado: true
    The Scope chain
        Es una cadena de alcance de las variables.
        Variable lookup in scope chain
            JS look from child to parents scopes, not from the other way. 
            Childs can acces to parents variable but parents can't acces to child variables
        const myName = "Jose"
        function first (){
            const age = 30          // Global variable
            if (age >= 30) {const decade = 3; var millenial = true}
            function second (){const job = "teacher"; console.log (`${myName} is a ${age}-olg ${job}`)}
            second()
        }
        first()
        Variable myName scope chain = all
        Variable age scope chain = first(), IF, second() 
        Variable decade scope chain = IF
        Variable millenial scope chain = first(), IF, second()
        Variable job scope chain = second()
        Access scope chain variables second() = nyName, age, millenial, job
        Access scope chain variables IF = myName, age, millenial, decade
        Access scope chain variables first() = age, millenial, nyName
        Access scope chain variables global = nyName
    Differences between Scope chain vs Call Stack
        Call Stack
            Is the order of execution
            In our example:
                second
                IF
                first
                global
        Scope Chain
            Is the acces of variables
            Has nothing to do with order in which functions were called!

Variable environment: hoisting and the TDZ
    Definition
        Hoisting: Makes some types of variables accessible/usable in the code before they are actually declared.“Variables magical lifted to the top of their scope”.
                ^
            BEHIND THE SCENES
                ^
        Before execution, code is scanned for variable declarations, and for each variable, a new property is created in the variable environment object.
    How it works hoisting
                                                Hoisted?                    Initial value               Scope
        function declarations                   Yes                         Actual function             Block (In strict mode. Otherwise: function!)
                We can use function declarations before they are actually declared in the code, because they are stored in the variable environment object even before the code starts executing
        var variables                           Yes                         Undefined                   Function
                If we want use a var variable before declaration, the variable has a initial value of "undefined", not an error. Common bugs, this is why in modern JS we don't use "var"
        let/const variables                     No in practice              <uninitialized>,TDZ         Block
                                                but yes technically         Temporally Dead Zone
                We say that these variables are placed in the TDZ. Which makes it so that we can't access the variables between the beginning of the scope and the plce where the variables are declared. In this case we have an error, not undefined.
        function expressions and arrows                     Depends if use var or let/const
    Temporal Dead Zone, let and const
        Example:
            const nyName = "Jose"
            if (myName === "Jose"){
            (1) console.log(`Jose is a ${job}`)
            (2) const age = 2021 - 1990
            (3) console.log(age)
            (4) const job = "farmer"
            (5) console.log(x)
            }
        TDZ for job variable is: (1)(2)(3). The variable didn't even exist.
            TDZ starts at the beginning of the scope until the line where it is defined
        (1) ReferenceError: Cannot access "job" before initialization ----> We try to acces before we define it
        (5) ReferenceError: x is not defined ----> variable X not created. It is in TDZ until his value is declared
    Why was created TDZ?
        Makes it easier to avoid and catch errors: accesing variables before declaration is bad practice and should be avoided.
        Makes const variables actually work. Because we can't define to "undefined"(like var) and later reassign with other value
    Why exists hoisting?
        Using functions before actual declaration
        Var hoisting is just a byproduct.

This keyword
    Definition
        this keyword/variable: Special variable that is created for every execution context (every function).
        Takes the value of (points to) the “owner” of the function in which the this keyword is used.
        this is NOT static. It depends on how the function is called, and its value is only assigned when the function is actually called.
        this does NOT point to the function itself, and also NOT the its variable environment!
    Examples of this to analyze
        Method ---->                        this = <Object that is calling the method>
            const persona = {
                name : "Jose"
                year: 1990
                calcAge : function {            // calcAge is method
                    return 2021 - this.year     // this = persona (same result as persona.year)
                }
            }
        Simple function call ---->          this = undefined (in strict mode. Otherwise(in the browser): window)
            Not attached to any object.
        Arrow functions ---->               this = <this of surrounding function (lexical this keyword)>
            Don't get their own "this keyword". The this function of the parent function
        Event listener ---->                this = <DOM element that the handler is attached to>
        new,call,apply,bind ---->           <Later in the course...>

Regular functions vs Arrow functions
    NEVER EVER use arrow functions as a method (function in object). The problem is "This keyword". The arrow functions haven't "This keyword".
        const amarillo = {
            firstName2: 'Antonio',
            greet: () => console.log(`Hey ${this.firstName2}`),
            greet2: function () { console.log(`Hey ${this.firstName2}`); },
        };
        amarillo.greet();                   // "Hey undefined". Amarillo object isn't a scope (global, function or block)
        var firstName2 = 'Matilda';         // If we have this variable in global scope. The arrow function can lead to error
        amarillo.greet();                   // "Hey Matilda". This happen because "this.firstName2" belongs to window object, NOT to amarillo object
        amarillo.greet2();                  // "Hey Antonio". Normal functions have YES "This keyword"
    Regular function called. Inside a regular function call, "This keyword" must be undefined
        const amarillo = {
            year: 1990,
            calcAge: function () {
                const isMillenial = function () {
                    console.log(this);              //undefined
                    console.log(this.year >= 1981 && this.year <= 1996);
                };
                isMillenial();                      // Regular function call. Resultado: TypeError: Cannot read property 'year' of undefined
            },
        };
        amarillo.calcAge(); //TypeError: Cannot read property 'year' of undefined
    Regular function called. Solutions
        Use "self" or "that". Before ES6
            calcAgeSelf: function () {
                const self = this; const that = this    // We use "self" or "that" like as a reminder of "This keyword"
                const isMillenial = function () {
                    console.log(self);                  // Object amarillo
                    console.log(that);                  // Object amarillo
                    console.log(`Self or that: ${self.year >= 1981 && self.year <= 1996}`);
                    console.log(`Self or that: ${that.year >= 1981 && that.year <= 1996}`);
                };
                isMillenial();                      // Regular function call. Resultado: true
            },
            Resultado: Self or that: true
    --> Use Arrow function. After ES6
            calcAgeArrow: function () {
                const isMillenial = () => {
                    console.log(this);
                    console.log(
                        `Arrow function: ${this.year >= 1981 && this.year <= 1996}`
                    );
                };
                isMillenial(); // Regular function call
            },
            Resultado: Arrow function: true
    Arguments keyword. Not important in moderns JS, use other ways
        Only available in regular functions
            const addExpr3 = function (a, b) {
                console.log('Arguments keyword:');
                console.log(arguments);                     // arguments YES exists
                return a + b;
            };
            addExpr3(3, 4);                                 // console.log = Array with arguments [3, 4]
            var addArrow2 = (a, b) => {
                console.log('Arguments keyword arrow:');
                console.log(arguments);                     // Not exists in arror functions
                return a + b;
            };
            addArrow2(3, 4);                                // Arguments is not defined

Primitives vs objects (primitive vs reference types)
    Primitives are stored in CALL STACK
        Primitive types: number, string, boolean, undefined, null, symbol, BigInt.
    Objects are stored in HEAP.
        Because objects might be too larg to be stored in the call stack, instead they are stored in the heap wich is like an almost unlimited memory pool
        Reference types: object literal, arrays, functions, etc
    Example:
        Primitives
            let age = 30;
            let oldAge = age;
            age = 31;
            console.log(age);                   // Resultado: 31
            console.log(oldAge);                // Resultado: 30
        Objects 
            const me = {
                name: 'Jose',
                age: 30,
            };
            const friend = me;
            friend.age = 27;
            console.log('Friend: ', friend);    // Resultado: 27
            console.log('Me: ', me);           // Resultado: 27            Here we see how we can change CONST value
    This happen because primitives are stored in differents memories and the object point into the same memory
        Primitives
            NAME            MEMORY          VALUE ADRESS
            Age             Memory 001      30 ==> 31
            oldAge          Memory 002      31
            So, when we change the value of Age, we change the value of Memory 001, but the Memory 002 not change
            Memory 001 -- Memory adress --> 30 ==> 31
            Memory 002 -- Memory adress --> 31
        Objects (Reference value)
            me ----> Memory 003 (30 ==> 27) <---- friend
            So, when we change the value of friend object, we change the value of Memory 003, wich is pointed by the 2 objects
            Memory 003 -- Memory adress --> D30F
    How to copy a new object and no modify the old object
        const NAME = Object.assign ( {} , OBJECT )
        const friend2 = Object.assign ( {} , me )
        Example:
            friend2.age = 27
            console.log(friend2.age)        // Resultado: 27
            console.log(me.age)             // Resultado: 30
        But only work in the first level. If we have a object inside an object, this way don't work.
            Both objects point to the same second level object
            To do a "deep clone" we use an externals libraries like "Lo-Dash"

3 more big topics of how JS works behind the scenes (for later..)
    Prototypal Inheritance:         Object Oriented Programming (OOP) With JavaScript               in Section 14
    Event Loop:                     Asynchronous JavaScript: Promises, Async/Await and AJAX         in Section 16
    How the DOM Really Works:       Advanced DOM and Events                                         in Section 13


---------------------- DATA STRUCTURES, MODERN OPERATORS AND STRINGS ----------------------

Destructuring arrays
    Destructuring is an ESx feature and it's basically a way of unpacking values from an array or an object into separate variables
    Creating arrays
        const array = []
    Types of assign variables to array value
        const arr = [2, 3, 4, 5, 6, 7, 8];
        First type
            let a = arr[0];           // a = 2
            let b = arr[1];           // b = 3
            let c = arr[4];           // c = 6
        Second type
            let [x, y, , , z] = arr;      //x = 2; y = 3; z = 6
    Reassign / mutating (Example: change value between a and b)
        First
            const temp = a          // temp = 2
            a = b                   // a = 3
            b = temp                // b = 2
        Second
            [a, b] = [b, a];        // a = 3; b = 2
    Receive 2 return values from a function
        const restaurant = {
            starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],
            mainMenu: ['Pizza', 'Pasta', 'Risotto'],
            order: function (starterIndex, mainIndex) {
                return [this.starterMenu[starterIndex], this.mainMenu[mainIndex]];
            },
        };
        const [starter, mainCourse] = restaurant.order(2, 0);               // starter = "Garlic Bread"; mainCourse = "Pizza"
    Nested: one array inside another array
        const nested = [2, 4, [5, 6]];
        const [i, , j] = nested                         // i = 2; j = [5,6]
        const [i, , [j, k]] = nested;                   // i = 2; j = 5; k = 6
    Default values. For example, when we don't know how long in an array
        const [p, q, r] = [8,9]             // p = 8; q = 9; r = undefined
        const [p=1, q=1, r=1] = [8, 9]      // p = 8; q = 9; r = 1

Destructuring objects
    Creating objects
        const object = {}
        const {object1, object2, object3} = {direccion1, direccion2, direccion3}
    Example
        const restaurant = {
            name: 'Classico Italiano',
            location: 'Via Angelo Tavanti 23, Firenze, Italy',
            categories: ['Italian', 'Pizzeria', 'Vegetarian', 'Organic'],
            starterMenu: ['Focaccia', 'Bruschetta', 'Garlic Bread', 'Caprese Salad'],
            mainMenu: ['Pizza', 'Pasta', 'Risotto'],
            openingHours: {
                thu: {
                    open: 12,
                    close: 22,
                },
                fri: {
                    open: 11,
                    close: 23,
                },
                sat: {
                    open: 0, // Open 24 hours
                    close: 24,
                },
            },
        };
    Creating new objects with the same name than the propierties
        const {name, openingHours, categories} = restaurant             // They are the same
    Creating new objects with different name than the propierties
        const { name: restaurantName, openingHours: hours, categories: tags} = restaurant;
        console.log(restaurantName, hours, tags);                       // Same
    Default values. When the propierty don't exist
        const { menu, starterMenu: starters} = restaurant;              // menu = undefined
        const { menu = [], starterMenu: starters = [] } = restaurant;   // If the property don't exist, the object = [empty array]
    Mutating
        It is different from array, we need to put () outside {} because JS when see {} expects complex code
            let a = 111;
            let b = 999;
            const obj = { a: 23, b: 7, c: 14 };
            ({ a, b } = obj);                       // a = 23; b = 7
    Nested(objects inside objects). Example: openingHours inside restaurant
        const { fri } = openingHours;               // Resultado: { open: 11, close: 23}
        const {
            fri: { open, close },
        } = openingHours;
        console.log(open, close)                    // Resultado: 11 23
        const {
            fri: { open: o, close: n },
        } = openingHours;
        console.log(o, n);                          // Resultado: 11 23
    Automatic destructuring
        const restaurant = {
            ...
            orderDelivery: function ({ starterIndex, mainIndex, time, address }) {
                    console.log(
                        `Order received! ${this.starterMenu[starterIndex]} and ${this.mainMenu[mainIndex]} will be delivered to ${address} at ${time}`
                    );
                },
            ...
        }
        restaurant.orderDelivery({
            time: '22:30',
            address: 'Calle Falsa, 234',
            mainIndex: 2,
            starterIndex: 2,
        });                                     Resultado: Order received! Garlic Bread and Risotto will be delivered to Calle Falsa, 234 at 22:30

The spread operator "..."
    Used to expand an array into all its elements, so basically unpacking all the array elements at one
    Structure
        const arr2 = [7, 8, 9];
        const badNewArr = [1, 2, arr2[0], arr2[1], arr2[2]];        // Or use FOR loop. Resultado: badNewArr = [1,2,7,8,9]
        const NewGoodArray = [1, 2, ...arr2];                       // Resultado: NewGoodArray = [1,2,7,8,9]
    It is used to expand arrays (like example before) or when we pass arguments into functions
    Expand array individually
        console.log(...NewGoodArray);       // 1 2 7 8 9 // Number by number
    Shadow copies of arrays (Similar to object.assign() but more easier to use)
        const mainMenuCopy = [...restaurant.mainMenu]
    Merge two arrays together
        const menuMerge = [...restaurant.mainMenu, ...restaurant.starterMenu];
    The spread operator works on all so-called iterables
        Iterables: things like all arraysm strings, maps or sets and objects (since ES2018 although objects are not iterables)
        Strings
            const str = 'Jose';
            const letters = [...str];       // Resultado: letters ["J", "o", "s", "e"]
    Multiple values separated by a comma are usually only expected when we pass arguments into a function
        console.log (...str)                // Resultado: J o s e
        console.log(`${...str} Antonio`)    // Error
    Method to spread operator example
        const restaurant = {
            ...
            orderPasta: function (ing1, ing2, ing3) {
                console.log(
                    `Here is your delicious pasta with ${ing1}, ${ing2} and ${ing3}`
                );
            },
        };
        const ingredients = ['Champiñones', 'Aceitunas negras', 'Tomate', 'Pepinillos'];
        restaurant.orderPasta(...ingredients);              // Resultado: Here is your delicious pasta with Champiñones, Aceitunas negras and Tomate
    Since ES2018 spread operator actually also work on objects(objects are not iterables)
        const newRestaurant = { founderYear: 1985, ...restaurant, founder: 'Guiseppe' };
        Shadow copies
            const restaurantCopy = {...restaurant}
            In this case we can change values and not affect to the first object. The 2 objects NOT point to the same memory
            Previous
                const restaurante2 = restaurant
                restaurante2.name = "Restaurante Bonito"
                console.log(restaurante2.name)              // Resultado: Restaurante Bonito
                console.log(restaurant.name)                // Resultado: Restaurante Bonito
                restaurant ----> Memory 001 <---- restaurante2
            Now
                const restaurante2 = {...restaurant}
                restaurante2.name = "Restaurante Bonito"
                console.log(restaurante2.name)              // Resultado: Restaurante Bonito
                console.log(restaurant.name)                // Resultado: Classico Italiano
                restaurant ---->    Memory 001
                restaurante2 ---->  Memory 002
        Merge
            const restaurantDelivery = {
                name: "Restaurant deliveroo"                // In this case overwrite this property, because is the second merging
                address: 'Calle falsa, 123',
                phone: '555 666 777',
                doors: 3,
            };
            const restaurantmerge = { ...restaurant, ...restaurantDelivery };
            console.log(restaurantmerge);

Rest pattern and parameters
    Exactly like spread operator but Rest Pattern works than spread operator. Rest Pattern works to collect multiple elements and condense them into an array
    Spread is used in right side of =
        const spread = [1, 2, ...arr]                                       // spread = [1, 2, 7, 8, 9]
    Rest is used in LEFT side of =
        const [a, b, ...others] = [1, 2, 3, 4, 5]                           // a = 1; b = 2; others = [3, 4, 5]
        const [a, b, others] = [1, 2, 3, 4, 5];                             // a = 1; b = 2; others = 3
    We can't use in the middle
        const [a, b, ...others, c] = [1, 2, 3, 4, 5]                        // Error
    It works in Objects. It will be collected into a new object and not into a new array
        const { sat, ...weekDays } = restaurant.openingHours;               // sat = {...}; weekDays ={thu:{...}, fri:{...}}
        console.log(sat, weekDays);
    Example of use:
        const add = function (...numbers) {                     
            let sum = 0;
            for (let i = 0; i < numbers.length; i++) {
                sum += numbers[i];
            }
            console.log(sum);
        };
        add(2, 3);                              // Resultado: 5
        add(5, 3, 7, 2);                        // Resultado: 17
        add(8, 2, 5, 3, 2, 1, 4);               // Resultado: 25
        const arrayParameter = [23, 5, 7];
        add(...arrayParameter);                 // Resultado: 35
    We write "...numbers" in parameters because the function accept arrays [add(...arrayParameter)] and simply numbers [add(5, 3, 7, 2);]

Short circuiting (&& and ||)
    We can use AND and OR operators more than boolean values
    OR operator
        return the first true value.
    AND operator
        return the last true value. If all are true
        returnt the first false value if at least one is false
    OR popierties
        They can use any data type
            console.log (3 || "Jonas")
        Return any data type
            Resultado: 3
        Short-ciruiting, also called short circuit evaluation
            If the first value is TRUE, the other will not even be evaluated(JS will not even take a look at it)
            Evaluate everything and return the first value
    AND popierties
        They can use any data type
            console.log (3 && "Jonas")
        Return any data type
            Resultado: Jonas
        Short-ciruiting, also called short circuit evaluation
            If the first value is FALSE, the other will not even be evaluated(JS will not even take a look at it)
            Evaluate everything and return the last value

The nullish coalescing operator ( ?? )
    Introduced in ES2020
    Work with the idea with NULLISH values instead of FALSE values    
    Nullish values
        null
        undefined
        (NOT 0 or "")

Looping arrays: the FOR-OF loop
    Structure
        for (const NAME of ITERABLE) {
            CODING
        }
    Example
        const menuFor = [...restaurant.starterMenu, ...restaurant.mainMenu];
        for (const item of menuFor) {
            console.log(item);              // Resultado(individually): Focaccia, Bruschetta, Garlic Bread, Caprese Salad, Pizza, Pasta, Risotto.
        }
        Same as before but much more simple
        for (let i = 0; i < menuFor.length; i++) {
            console.log(`${menuFor[i]}`);
        }
    Still working "Continue" and "break" keywords

Enhanced object literals
    Object oustide an object. Not necesary to repeat variable name and object
        const Horas = { lunes: { ... }, viernes: { ... }, Dia-6: { ... }, };
        const Restaurante = {
            name: 'Restaurante italiano',
            // Before ES6
            //Horas: Horas,
            // After ES6
            Horas,
        };
    Writing methods
        const Restaurante = {
            // Before ES6
            order: function (param1, param2) { console.log('Order 1'); },
            // After ES6
            order2(param1, param2) { console.log('Order2'); },
        };
    We can compute(calculate) names instead of having to write out manually and literally
        const dias = ["lun","mar","mier","Jue","vie","sab","dom]
        const Horas = { [dias[0]]: { ... }, [dias[4]]: { ... }, [`Dia-${2+4}`: { ... }, };

Optional Chaining ( ?. )
    If a certain property does NOT exist, then undefined is returned inmetiately
    Structure
        console.log(restaurant.openingHours.mon?.open);
        If exists "mon", then show "open". But if not exists "mon", then undefined is show
    Multiple Optional Chaining
        console.log(restaurant.openingHours?.mon?.open);
    Use in methods
        console.log(restaurant.order?.(0, 1) ?? 'Method does not exist');
    Use in arrays
        const users = [{ name: 'Antonio', email: 'emailfalso@falso.com' }];
        console.log(users[0]?.name);                    // Resultado: "Antonio"

Looping objects: Object keys, values and entries
    Meaning
        Property names = keys
        Value = values
        Entries = keys + values on objects. On arrays, index number + element
    Looping keys
        for (const day of Object.keys(openingHours)) {
            console.log(day);               // Show us the name of the propierties=keys of the key "openingHours"
        }
        for (const names of Object.keys(restaurant)) {
            console.log(names);             // Show us the name of the propierties=keys of the object restaurant
        }
    Looping values
        for (const value of Object.values(categories)) {
            console.log(`Category of ${value} food`);
        }                                   // Show only the values
    Looping entries
        for (const entrada of Object.entries(openingHours)) {
            console.log(`We open at ${entrada[1].open}`);
            console.log(entrada)
        }                                   // Show entrada[0] = "thu"; entrada [1] = {open:12 ,close:22}
        const entrada = Object.entries(openingHours);
        for (const [key, { open, close }] of entrada) {
            console.log(`On ${key} we open at ${open} and close at ${close}`);
        }                                   // Resultado: On thu we open at 12 and close at 22

Sets
    It's a collection of unique values. NO duplicates. The order of the elements no matter
    Not replace arrays at all
    Main use case of sets is actually to remove duplicate values of arrays
    Creation
        const NAME = new Set([USUALLY AN ARRAY])
        const ordersSet = new Set(['pasta', 'pizza', 'pizza', 'Risotto', 'pasta', 'Pizza']);
        orders = ['pasta', 'pizza', 'pizza', 'Risotto', 'pasta', 'Pizza']
        const ordersSet = new Set(orders);
        console.log(ordersSet)                      // Resultado: Pasta, pizza, Risotto, Pizza      // Just only these
    Size NOT length
        console.log(ordersSet.size)                 // Resultado: 4
    Check if an element is in the set
        console.log(ordersSet.has("Pizza"));        // Resultado: true
    Add new elements
        ordersSet.add("Garlic Bread")
    Delete elements. Delete ALL copies
        ordersSet.delete("pizza")                   // Resultado: Pasta, Risotto, Pizza, Garlic Bread
    Delete ALL elements
        ordersSet.clear()
    Retrieve values
        There is NO WAY of getting values out of a set
        But, we can transform the set into an array
            const ordersSetArray = [...new Set(orders)]
        And in this case we can retrieve the values without duplicates
    Looping
        for (const order of ordersSet) {
            console.log(order);
        }

Maps: fundamentals
    It is the same than the objects but in objects the keys are always strings and in maps the keys can be any type(objects, array, other maps)
    Creation
        const NAME = new Map()
        const restMap = new Map()
        The normal thing is to create it empty and later add
    Add elements
        restMap.set("KEY", "VAUE").set("KEY2", "VALUE2")
        restMap.set('name', 'Classico Italiano');
        restMap.set(1, 'Lisboa').set(2, "Portugal");
        restMap.set('categories', ['Italian', 'Pizzeria', 'Vegetarian', 'Organic']);
        restMap.set(document.querySelector('h1'), 'Heading');
    Read data
        restMap.get(1);                 // Resultado: Lisboa
    To know if a key exists
        restMap.has('categories');      // Resultado: true
    Delete elements
        restMap.delete(2)
    Delete ALL elements
        restMap.clear()
    Size
        console.log(restMap.size);
    Keys with arrays
        restMap.set([5, 6], 'Test');
        console.log(restMap.get([5, 6]));       // Resultado: undefined. Because not refered to the same place in memory
        const arrMap = [5, 6];
        restMap.set(arrMap, 'Test');
        console.log(restMap.get(arrMap));       // Resultado: Test. Because arrMap refered to the same place in memory pointing the array value
    Add elements without using set
        const question = new Map([
            ['question', 'What is the best programming language?'],
            [1, 'C'],
            [2, 'Java'],
            [3, 'JavaScript'],
            ['correct', 3],
            [true, 'Correct!'],
            [false, 'Try again!'],
        ]);
    It exists an easy way to convert from objects to maps
        const MAP = new Map(Object.entries(OBJECT));
        const hourMap = new Map(Object.entries(openingHours));
    Convert a map into an array
        const mapToArray = [...question];
    Entries, keys and values work
        question.entries()
        question.keys()
        question.values()

Which data structure to use?
    Sources of data
        From the program itself: Data written directly in source code (e.g. status messages)
        From the UI: Data input from the user or data written in DOM (e.g tasks in todo app)
        From external sources: Data fetched for example from web API (e.g. recipe objects)
    With all data of the sources we'll create Collection of Data.
    This Collecions of Data has Different types of Data Structure.
    Data Structure
        Simple list?
            Array
            Set
        Key/Value pairs? Keys allow us to describe the values
            Object
            Map
    Other built-in
        In JS: WeakMap, WeakSet
        Not in JS : stacks, queues, linked lists, trees, hash tables
    Differences
        Simple list
            Arrays
                Use when you need ordered list of values (might contain duplicates)
                Use when you need to manipulate data
            Sets
                Use when you need to work with unique values
                Use when high-performance is really important
                Use to remove duplicates from arrays
        Key/Value pairs
            Objects
                More “traditional” key/value store (“abused” objects)
                Easier to write and access values with . and []
                Use when you need to include functions (methods)
                Use when working with JSON (can convert to map)
            Maps
                Better performance
                Keys can have any data type
                Easy to iterate
                Easy to compute size
                Use when you simply need to map key to values
                Use when you need keys that are not strings

Working with Strings - Part 1
    Boxing
        When we call a method in a string, JS automatically transform the string in a object with the same content.
        It's on that object where the methods are called.
        new String("Jose")                  // Resultado: { 0:"J",1:"o",2:"s",3:"e",}
    Methods very used
            const airline = 'TAP Air Portugal';
            const plane = 'A320';
        Consult position
            plane[0];                       // Resultado: A
            'B737'[1];                      // Resultado: 7 (string)
        Lenght
            airline.length;                 // Resultado: 16
            'Prueba de lenght'.length;      // Resultado: 16
        Position of letter or word
            airline.indexOf('r');           // Resultado: 6
            airline.lastIndexOf('r');       // Resultado: 10
            airline.indexOf('Portugal');    // Resultado: 8
            airline.indexOf('portugal');    // Resultado: -1 (not found)
        Position start and stop. Last value is not included
            airline.slice(4);               // Resultado: Air Portugal
            airline.slice(4, 9);            // Resultado: Air P
            airline.slice(-4);              // Resultado: ugal
            airline.slice(6, -1);           // Resultado: r Portuga
            airline.slice(0, airline.indexOf(' '));         // Resultado: TAP
            airline.slice(airline.lastIndexOf(' ') + 1);    // Resultado: Portugal

Working with Strings - Part 2
    Uppercase
        "HOLA QUE TAL".toLowerCase()       // Resultado: tap air portugal
    Lowercase
        airline.toUpperCase()       // Resultado: TAP AIR PORTUGAL
    Removes whitespace from both sides
        const Email = '  Hello@Jose.iO \n';
        const trimedEmail = loweEmail.trim();           // Resultado: Hello@Jose.iO
    We can put methods one followed by another
        const normalizedEmail = loginEmail.toLowerCase().trim();
    Replace parts of strings
        const priceGB = '288,97 Pounds';
        const priceUS = priceGB.replace('Pounds', 'Dollars').replace(',', '.');         // Resultado: 288.97 Dollars
        const announcement = 'All passengers come to boarding door 23. Boarding door 23!';
        announcement.replace('door', 'GATE')    // Resultado: All passengers come to boarding GATE 23. Boarding door 23!
        announcement.replaceAll('door', 'GATE') // Resultado: All passengers come to boarding GATE 23. Boarding GATE 23!
    Return booleans
        const plane = "Airbus A320neo"
        plane.includes('A32')           // Resultado: true
        plane.startsWith('Air')         // Resultado: true
        plane.endsWith('eo')            //Resultado: true

Working with Strings - Part 3
    Separating strings
        'A very niceD string'.split(' ')        // Resultado: ["A", "very", "niceD", "string"]
    Uniting strings
        const name = ['Mr.', firstName, lastName.toUpperCase()]
        const newName = name.join(' ');         // Resultado: Mr. Jose GONZALEZ
    Padding strings
        Add a number of characters to the string until the string has a certain desired lenght
        message.padStart(25, '+');              // Resultado: +++++++++++Go to gate 23!
        message.padEnd(24, '-');                // Resultado: Go to gate 23!----------
        const last = message.slice(-4).padStart(message.length, '*');
    Repeat
        message.repeat(3)                       // Resultado: Go to gate 23!Go to gate 23!Go to gate 23!


---------------------- A CLOSER LOOK AT FUNCTIONS ----------------------

Default parameters
    Example
        const createBooking = function (flightNum="0001", numPassengers = 1, price = 199 * numPassengers ) {
            // Default value ES5:
            flightNum = flightNum || "0001"
            numPassengers = numPassengers || 1;
            price = price || 199;
        };
    Calling functions by defaults parameters
        createBooking()                             // Resultado: 0001, 1, 199
        createBooking("H123", undefined, 500)       // Resultado: H123, 1, 500

How passing arguments works: value vs reference
    Primitives
        JS copy the value, not change the original
            let flightNum = 100
            function (flightNum){flightNum = 3}     // Resultado: 3
            console.log(flightNum)                  // Resultado: 100
    References
        JS no copy the reference, if something change, the reference will change. So all what pointing the reference will change
            let jonas = {name:"Jonas", pass:"123"}
            function (name){jonas.name = "Pedro"}     // Resultado: Pedro
            console.log(jonas)                  // Resultado: Pedro
    JS does NOT have passing by reference, ONLY passing by value

First-Class and higher-Order Functions
    First-class functions
        JS trats functions as first-class citizen, this means that functions are simply values
        Functions are just another "type" of object
        Store functions in variables or propierties
            const add = (a,b) => a + b                                      // (a,b) => a + b
            const counter = {value: 23, inc: function(){this.value++}}      // function(){ this.value++ }
        Pass functions as arguments to OTHER functions
            btnClose.addEventListener("click", add )                        // add
        Return functions FROM functions
        Call methods on functions
            counter.inc.bind(someOtherObject)                               // "bind()"
    Higher-order functions
        A function that receives another function as an argument, that returns a new function, or both
        This is only possible because of first-class functions
        Function that receives another function
            btnClose.addEventListener("click", add )                        // addEventListener (High-Order); add (Callback function)
        Function that returns new function
            function count(){                                               // count (High-Order)
                let counter = 0
                return function () { counter ++}                            // function() (returned function)
            }
    There are NO first class functions in practice, it's just a concept.
    There are higher order functions in practice, wich are posible because JS supports first class functions
    Abstraction
        We hide the detail of some code implementation because we don't really care about all that detail

The call and apply methods
    Example
        const lufthansa = {
            book(flightNum, name) {
                console.log( `${name} booked a seat on ${this.airline} flight ${this.iataCode}${flightNum}`
        );},};
        const book = lufthansa.book;
        const eurowing = {
            airline: 'Eurowings',
            iataCode: 'EW',
            bookings: [],
        };
        book(23, 'Pepito'); // Resultado: Error. Because "this keyword NOT point to nothing --> undefined"
    We need to say JS explicity what the "this keyword" should be with
    Call
        NAME.call(THISKEYWORD, OTHERPARAMETERS)
        book.call(eurowing, 23, 'Sarah');               // Resultado: Sarah booked a seat on Eurowings flight EW23
        book.call(lufthansa, 213, 'Cooper');
        Is necesary that the propierties HAVE the same name because "this keyword" look there "this.iataCode"
    Apply.
        It is the same than call, but use an array in parameters
        NAME.apply(THISKEYWORD, [OTHERPARAMETERS])
        book.apply(lufthansa, [968, 'Pepito']);
        const flightData = [854, 'John Cooper'];
        book.apply(lufthansa, flightData);                  // Resultado: John Cooper booked a seat on Lufthansa flight LH854
        NOT USED in modern JS, CALL method is the same:
            book.call(lufthansa, ...flightData);            // Resultado: John Cooper booked a seat on Lufthansa flight LH854
    Bind
        Studied in detail in next section

The bind method
    Manually sets the "this keyword" for any function call
    Bind does NOT immediately call the function, instead it returns a new function where the "this keyword" is bound. So it's set to whatever value we pass into bind
    Structure
        book.bind(eurowing)         // This NOT call the function, returns a new function so we can save in a variable
        const bookEW = book.bind(eurowing);
    Calling the bind method
        bookEW(125, 'Steven');      // Resultado: Steven booked a seat on Eurowings flight EW125
    It is possible to use a default parameter when use bind method
        const bookEW23 = book.bind(eurowing, 23)        // The first parameter is 23 and we use this method, allways will be 23
        bookEW23('Pedrito');        // Resultado: Pedrito booked a seat on Eurowings flight EW23
    Using with event listeners
        .querySelector('.buy').addEventListener('click', lufthansa.buyPlane.bind(lufthansa))      // We force to point to lufthansa object. Not to the class "buy"
        .querySelector('.buy').addEventListener('click', lufthansa.buyPlane))      // NOT working because "this keyword" is pointing to "buy" class
    Partial application
        When we are not interested in "this keyword" but we still use bind method for something like default parameters
            const addTax = (rate, value) => value + value * rate;
            console.log(addTax(0.1, 200));
            const addTaxIVA = addTax.bind(null, 0.21); // const addTaxIVA = value => value + value * 0.21;
            console.log(addTaxIVA(100));
        We can use default parameters but this here is creating a brand new simply more specific function based on a more general function.
        It permit to create a much more default parameters
            const IVAGeneral = addTax.bind(null, 0.21);
            const IVAReducido = addTax.bind(null, 0.1);
            const IVASuperReducido = addTax.bind(null, 0.04);

Immediately invoked function expressions ( IIFE )
    If we want to use one function once and never more we can do it
        ( function(){console.log('This will never run again')} ) ();
        const runNotOnce=function(){console.log('This function will run again')};
    Arrow functions IIFE
        ( ()=>console.log('This will ALSO never run again') ) ();
    In modern JS, IIFE are NOT that used anymore to maintain private variables
        Because if all we want is to create a new scope for data privacy. All we need to do is to just create a block like
            {
                const isPrivate = 25;
                var notPrivate = 35;
            }
        There's no need to creating a function to create a new scope. Unless we use var
    In modern JS, if you need to execute a function just once, then the IIFE is still the way to go

Closures
    Is not a feature that we explicitly use. SO, we don't create closures.
    Closures just simply happen automatically in certain situations. We need recognice those situations.
    Any function always has access to the variable environment of the execution context in which the function was created.
        Even after a debt execution context is gone.
    Closure: variable environment attached to the function, exactly as it was at the time and place the function was created.
 -> A closure is like a backpack that a function carries around wherever it goes.
        This backpack has all the variables that were present in the environment where the function was created.
            Person      ---->   Function
            Backpack    ---->   Closure
            Books       ---->   Variables
    We do NOT have to manually create closures, this is a JavaScript feature that happens automatically
        We can’t even access closed-over variables explicitly. A closure is NOT a tangible JavaScript object.
    To see the closure
        console.dir(FUCTION)    ==>     [[Scopes]]  ==>     0: Closure


---------------------- WORKING WITH ARRAYS ----------------------

Simple array methods
    Slice method
        We can extract part of any array, but without changing the original array. Similar to the string.
        arr = ['a', 'b', 'c', 'd', 'e']
        arr.slice(1,4)                  // Resultado: ["b", "c", "d"]
        NOT included the last
        arr.slice(2)                    // Resultado: ["c", "d", "e"]
        arr.slice(-2)                   // Resultado: ["d", "e"]
        We can create a shadow copy
        const arrCopy = arr.slice()     // Resultado: ['a', 'b', 'c', 'd', 'e']
        const arrCopy = [...arr]        // Resultado: ['a', 'b', 'c', 'd', 'e']
    Splice method
        It is similar than Slice but Splice YES change the original array
            const arrSlice = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];
            arrSlice                    // Resultado: ['a', 'b', 'c', 'd', 'e', 'f', 'g'];
            arrSlice.splice(2, 4))      // Resultado: ["c", "d", "e", "f"]
            arrSlice                    // Resultado: ["a", "b", "g"]
        In this case, the second value is included
            splice(2,4) Included the values 2,3 and 4
            slice(2,4)  Included the values 2 and 3
    Reverse method
        This method turns it around the values
            const arrReverse = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];
            arrReverse.reverse()        // Resultado: ["g", "f", "e", "d", "c", "b", "a"]
        Change the original value
            arrReverse                  // Resultado: ["g", "f", "e", "d", "c", "b", "a"]
    Concat method
        Use to concatenate two arrays
            const arrConcat = arr.concat(arrReverse);       // Resultado: ["a", "b", "c", "d", "e", "g", "f", "e", "d", "c", "b", "a"]
    Join method
        Unite the values in the array with a definive separation
            arr.join(' - ')             // Resultado: a - b - c - d - e
            arr.join(';')               // Resultado: a;b;c;d;e
            arr.join(' / next:')        // Resultado: a / next:b / next:c / next:d / next:e
    And much more

Looping arrays: forEach
    Same functioning than FOR-OF loop
    Structure
        ARRAY.forEach( function(element){} )
    Destructuring
        FOR-OF Loop
            for (const [i, movement] of movements2.entries()) {
                if (movement > 0) {
                    console.log(`Movement ${i + 1}: You deposited ${movement}`);
                } else {
                    console.log(`Movement ${i + 1}: You withdrew ${Math.abs(movement)}`);
                }
            }
        forEach
            movements2.forEach(function (movement, index, array) {          // ( CurrentElement, CurrentIndex, EntireArray )
                if (movement > 0) {
                    console.log(`Movement ${i + 1}: You deposited ${movement}`);
                } else {
                    console.log(`Movement ${i + 1}: You withdrew ${Math.abs(movement)}`);
                }
            });
    Using
        Is better using always forEach, instead:
        It not possible to break or continue the forEach method
    Maps
        MAP.forEach(function(VALUE, KEY, map) {})
    Sets
        SET.forEach(function(VALUE, KEY, set) {})
        In sets KEY = VALUE because sets does NOT have keys or indexes. For this, in real live use:
        SET.forEach(function(VALUE, _, set) {})
        Where "_" means a throwaway variable

Creating DOM elements
    Insert code in the HTML
        document.querySelector('').insertAdjacentHTML(POSITIONtoATTACHinHTML, TEXT)
            Position to attach in HTML
                'beforebegin': Before current element. Out of the element.
                'afterend': After current element. Out of the element.
                'afterbegin': Inside current element, after his first child element
                    array = [1, 2, 3, 4]
                    Order added: 4, 3, 2, 1
                'beforeend': Inside current element, before his last child element
                    Order added: 1, 2, 3, 4
        document.querySelector('.main').insertAdjacentHTML(afterbegin, "Prueba")

Data transformations: map, filter, reduce
    Big array methods used all the time to perform data transformations. Create new arrays.
        [3, 1, 4, 3, 2]
    Map method
        Returns a new array containing the results of applying an operation on all original array elements.
        MAP ----> current * 2 ----> [6, 2, 8, 6, 2]
        Better than forEach method
    Filter method
        Returns a new array containing the array elements that passed a specified test condition.
        FILTER  ----> current > 2 ----> [3, 4, 3]
    Reduce method
        Boils(“reduces”) all array elements down to one single value (e.g. adding all elements together)
        Reduce ----> accumulator + current  ----> [13]

The Map method
    Structure
        const NEWARRAY = ARRAY.map ( function((VALUE, INDEX, ARRAY)){ return OPERATION } )
        const movementsUSD = movements.map(function (mov) { return mov * eurToUSD; });
    We obtain the same results using FOR-OF loop but in modern JS is better to use map method
 -> Better using Arrow functions
    The princial diferente between Map Method and forEach method is:
        Map create a new array
        forEach not create a new array, just do things same as a loop

The Filter method
    Structure
        const NEWARRAY = ARRAY.filter ( (VALUE, INDEX, ARRAY) => OPERATION )
        const deposits = movements.filter(mov => mov > 0);
    We obtain the same results using FOR-OF loop but in modern JS is better to use filter method
 -> Better using Arrow functions

The Reduce method ( VERY IMPORTANT )
    Structure
        const NEWARRAY = ARRAY.reduce ( ((ACUMULATOR, VALUE, INDEX, ARRAY) => OPERATION), INITIALVALUEACCUM )
            ACUMULATOR
                Like a snowball that keeps accumulating the value that we ultimately want to return
        const balance = movements.reduce((acc, curr) => acc + curr, 0);
    Good use of array parameter: average
        const balance = movements.reduce( (acc, curr, i, arr) => acc + curr/arr.lenght, 0);
        ( 2+3 ) /2 == 2/2 + 3/2

The magic of chaining methods
    Pipeline
        It is posible to concatenate all the previous data transformations 
        const totalDepositsUSD = movements
            .filter(mov => mov > 0)
            .map(mov => mov * eurToUSD)
            .reduce((acc, mov) => acc + mov, 0);
    If we need to debugg we can use the console and the parameter array
        const totalDepositsUSD = movements
            .filter(mov => mov < 0)
            .map((mov, i, arr) => {
                console.log(arr); // Here we can see the bug: negative values
                return mov * eurToUSD;
            })
            .reduce((acc, mov) => acc + mov, 0);
    Chaining
        We should NOT overuse chaining. If use a lot of methods one below other, that will have problems.
        Think well what use, because two map methods can be translate into only one map method.
        NOT chain methods that mutate the original array

The find Method
    Retrieve ONE ELEMENT of an array based on a condition
    Structure
        const FIRSTELEMENT = ARRAY.find ( (VALUE, INDEX, ARRAY) => OPERATION )
        const encontrar = movements.find(mov => mov < 0);
    Differences between FIND and FILTER
        Find method stop when the first element fulfill the condition, while filter travel around all the array.
        Find method return ONE element and NOT an array. Filter method return an array

The findIndex Method
    Works as same as find method, but findIndex returns the index of the found element
    Structure
        const FIRSTINDEX = ARRAY.findIndex ( (VALUE, INDEX, ARRAY) => OPERATION )
        const encontrarIndex = movements.findIndex(mov => mov < 0);
    Work very good with "splice method", because we find the index and later we can delete it

Some and Every Method
    Some method
        Structure
            const BOOLEAN = ARRAY.some ( (VALUE, INDEX, ARRAY) => OPERATION )
            movements.some(mov => mov > 0)
        Similar to "includes"(Also bring back a boolean) but this method can't admit functions, only equality and "Some Method" admit functions, or conditions
            movements.includes(-130)
            movements.some( mov => mov == -130)
    Every method
        Structure
            const BOOLEAN = ARRAY.every ( (VALUE, INDEX, ARRAY) => OPERATION )
            movements.some(mov => mov < 5000)
        Similar to some, instead of only returns true if ALL elements satisfy the condition

Flat and FlatMap Method
    Flat
        It is used when we haven an array of arrays and whe want only one array without arrays inside
         Normally we use "Map method" and later "Flat method"
        Structure
            ARRAY.flat()
        Example 1
            const arrFlat = [ [1, 2, 3] , [4, 5, 6] , 7, 8];
            arrFlat.flat()                                      // Resutado: [1, 2, 3, 4, 5, 6, 7, 8]
        Example 2
            const arrFlatDeep = [ [ [1, 2] , 3] , [4, [5, 6] ] , 7, 8];
            arrFlatDeep.flat()                                  // Resutado: [Array(2), 3, 4, Array(2), 7, 8]
            arrFlatDeep.flat(1)                                 // Resutado: [Array(2), 3, 4, Array(2), 7, 8]
            arrFlatDeep.flat(2)                                 //Resultado: [1, 2, 3, 4, 5, 6, 7, 8]
            arrFlatDeep.flat(5)                                 //Resultado: [1, 2, 3, 4, 5, 6, 7, 8]
    FlatMap
        Introduced in ES2019
        Flatmap combine "Map Method" and "Flat Method".
        Only go 1 level deep, and CANNOT be changed
        Structure
            ARRAY.flatMap( (VALUE, INDEX, ARRAY) => OPERATION )
        Example
            const allMovements = accounts.map(acc => acc.movements).flat()
            const allMovements = accounts.flatMap(acc => acc.movements)
   
Sorting arrays
    Is a much-discussed topic in computer science and there are countless algorithms and methods of sorting values.
    For the moment we are going to use JS's built-in sort method
    Structure
        Array.sort(CURRENTVALUE , NEXTVALUE)
    This method MUTATE the original array
    Example:
        const owners = ['Jonas', 'Sarah', 'Adam', 'Martha'];
        console.log(owners.sort());                     // Resultado: ["Adam", "Jonas", "Martha", "Sarah"]
        console.log(owners);                            // Resultado: ["Adam", "Jonas", "Martha", "Sarah"]
    Strings
        A to Z
    Numbers
        NOT work. The method convert all to strings and try to sort it.
        It is possible fix it with a callback function.
        Logic:
            If function returns < 0 ===> a, b (Keep order)
            If function returns > 0 ===> b, a (Switch order)
            Ascending
            movements.sort((a, b) => a - b );
            Descending
            movements.sort((a, b) => b - a );
    Mixed strings and numbers
        NOT work at all

More ways of creating and filling arrays
    How to programmatically create and fill arrays
    Method 1: Empty + fill method
        Filling
            Structure
                Array.fill( VALUE, INITIAL, FINAL(notIncluded) )
            Mutate the original
        Example:
            const x = new Array(3);                 // Resultado: (3) [empty × 3] == [ , , ]
            x.fill(5)                               // Resultado: [5, 5, 5]
    Method 2: Array.form()  
        Structure
            Array.from({ length: NUMBER }, ( , VALUE) => OPERATION )
        Example
            Array.from({ length: 7 }, () => 1)                  // Resultado: [1, 1, 1, 1, 1, 1, 1]
            Array.from({ length: 7 }, ( _ , i) => i + 1)          // Resultado: [1, 2, 3, 4, 5, 6, 7]
    Method 3: QuerySelectorAll
        QuerySelectorAll returns a NodeList, wich is something like an array which contains all the selected elements. 
        So, it is necesary to convert it into an array

Which array method to use?
    To mutate original array
        Add to original
            .push       (end)
            .unshift    (start)
        Remove from original
            .pop        (end)
            .shift      (start)
            .splice     (any)
        Others
            .reverse
            .sort
            .fill
    A new array
        Computed from original
            .map        (loop)
        Filtered using condition
            .filter
        Portion of original
            .slice
        Adding original to other
            .concat
        Flattening the original 
            .flat
            .flatMap
    An array index
        Based on value
            .indexOf
        Based on test condition
            .findIndex
    Retrieve an array element
        Based on test condition
            .find
    Know if array includes a certain element
        Based on value
            .includes
        Based on test condition
            .some
            .every
    A new string
        Based on separator string
            .join
    To transform to value
        Based on accumulator
            .reduce         (Boil down array to single value of any type: number, string, boolean, or even new array or object)
    To loop over an array
        Based on callback
            .forEach        (Does not create a new array, just loops over it)


---------------------- NUMBERS, DATES, TIMERS AND BANKLIST ----------------------

Converting and checking numbers
    All numbers in JS are decimals.
        console.log(23 === 23.0);                           // Resultado: true
        Are represented internally based in a 64 base 2 format.
            Numbers are always stored in a binary format.
                Base 10 => 0 to 9
                Base 2 => 0 1
            In this system ys very complicated to represent fractions. For example: 0.1
                Base 10
                    Represent 1/10 is easy = 0.1
                    Represent 3/10 is imposible = 3.3333333333...
                Base 2
                    Represent 1/10 is imposible
        JS is very BAD for scientifics
            0.1 + 0.2 === 0.3                   // Resultado: false
    Convert string into number manually
        Number( "23" )
        + "23"
    Type coertion
        convert string into number automatically
        "23" === 23
    Parsing
        Number has methods to help us to analize. Is necessary than the string start with a number ("e23" not allowed)
            Number.parseInt("23px")
            Number.parseFloat("2.5rem")
        Parse accept other argument called "Regex". Is the base of the numeral system that we are using
            Number.parseInt("23px", 10 )
        In old JS it's been using parsing without "Number." but in modern JS is better to use it.
            Old JS:         parseFloat("2.5rem")
            Modern JS:      Number.parseFloat("2.5rem")
    isNaN
        Used to check if any value is a number. Boolean
            Number.isNaN('23')                          // Resultado: false
            Number.isNaN('23a')                         // Resultado: false
            Number.isNaN(+'23')                         // Resultado: true
            Number.isNaN(23 / 0)                        // Resultado: false
    Is Finite
        Used to check if any value is finite. Boolean
        Better method to know if a value is a number
            Number.isFinite(23)                         // Resultado: true
            Number.isFinite(23 / 0)                     // Resultado: false
            Number.isFinite("23")                       // Resultado: false
            Number.isFinite(+"23X")                     // Resultado: false
            Number.isFinite("23")                       // Resultado: true

Math and rounding
    Square Root
        Math.sqrt(25)                       // Resultado: 5
        25 ** (1 / 2)                       // Resultado: 5
        8 ** (1 / 3)                        // Resultado: 2
    Maximum and minimum
        Math.max(5,18,25,1,"150")           // Resultado: 150
        Math.min(5,18,25,1,"150")           // Resultado: 1
    Pi
        Math.PI
    Random
        Number between 0 and 1
        Math.random()
    Rounding
        Trunc eliminate the decimal part
        Round method round to the nearest integer
            Math.round(23.3)                // Resultado: 23
            Math.round(23.9)                // Resultado: 24
        Ceil method round up the integer
            Math.ceil(23.3)                 // Resultado: 24
            Math.ceil(23.9)                 // Resultado: 24
        Floor method round down the integer
            Math.floor(23.3)                // Resultado: 23
            Math.floor(23.9)                // Resultado: 23
        ALl of these works with type coertion
        Trunc and Floor works equal with positive number, but different with negative numbers
        Trunc and Ceil works equal with negative number, but different with positive numbers
    toFixed
        Used to adjust the number of decimals. Rounding the value
        Transforms the value into a String
            (2.227).toFixed(2)              // Resultado: 2.23 (string)
        We can transform again into a number
            +(2.227).toFixed(2)              // Resultado: 2.23 (float)
    As wee saw in the past, primitives has NOT methods but we use methods.
        It is possible because JS transform the primitives into boxes, aplly the method and later transform again into a primitive

The remainder operator
    Returns the remainder of a division into integers
        21 % 6                                  // Resultado: 3
        21 / 6                                  // Resultado: 3.5   ===> 21 = 6 * 3 + 3
    Even or odd number
        One number is even when is divisible by 2 and the remainder is 0
        21 % 2                                  // Resultado: 1     ====> Odd
        20 % 2                                  // Resultado: 0     ====> Even
    If we want to do something ever "NTH" time is a good idea to use the reminder operator
        Every third time
            if (i % 3 === 0){}
        Every fifth time
            if (i % 5 === 0){}
        Every eleventh time
            if (i % 11 === 0){}
        
Working with BigInt
    Introduced in ES2020
    Numbers are represented in 64 bits in JS = 64 ones or zeros
        From these 64 bits, 53 are used to store the digits themselves, the rest store the position of the decimal point and the sign
    Numbers bigget than (2^53 - 1) is not safe, what means it cannot be represented accurately
    A new primitive was added called BigInt.
    It can be used to store numbers as large as we want
    To transform into a big int it is necessary to add a "n" or with the method(not safe)
        1234254367866554323456765432134356              Normal Int. Not safe
        1234254367866554323456765432134356n             Bit Int. Safe
        BigInt(1234254367866554323456765432134356)      Bit Int. Not safe.
    Operations
        Works equal but only with BigInts
            1000n + 1000n                               // Resultado: 2000n
            1000n + 1000                                // Resultado: Error: cannot mix BigInt and other types
            10n / 3n                                    // Resultado: 3 ====> Returns the closest BigInt (remember the differente between 64 and 53 bits)
        The comparison still works mixing normal and big ints
            20n < 50            // Resultado: true
            20n == 20           // Resultado: true
            20n === 20          // Resultado: false ====> Not type coertion (different primitive type)
        The Math method for the moment is not working
            Math.sqrt(8n)       // Resultado: Error

Creating dates
    Form 1
        const date1 = new Date();               // Resultado: Sun Mar 07 2021 12:57:13 GMT+0100 (Central European Standard Time)
    Form 2
        new Date('Mar 12 2022 19:59:20')        // Resultado: Sat Mar 12 2022 19:59:20 GMT+0100 (Central European Standard Time)
    Form 3
        new Date(2037, 10, 19, 15, 23, 5));     // Resultado: Thu Nov 19 2037 15:23:05 GMT+0100 (Central European Standard Time)
        Year, month(Fanuary is month 0), day, hour, minute, second
    Form 4
        new Date(0)
        Unix time: 0 milliseconds after that initial Unix time
        new Date(3 * 24 * 60 * 60 * 1000)       // Resultado: Sun Jan 04 1970 01:00:00 GMT+0100 (Central European Standard Time)
    --> timestamp: (3 * 24 * 60 * 60 * 1000) = 259200000 this number is the "timestamp" of the day number three
    Timestamp
        We can obtain the date with the milliseconds passes since January 1, 1970
        new Date (2142253380000)                // Resultado: Thu Nov 19 2037 15:23:05 GMT+0100 (Central European Standard Time)
    Working with dates
        Example
            const future = new Date(2037, 10, 19, 15, 23);
        Get year
            future.getFullYear()                // Resultado: 2037
        Get month
            Start in month 0: January
            future.getMonth()                   // Resultado: 10 ==> Month number 11: November
        Get day
            future.getDate()                    // Resultado: 19
        Get day of the week
            Start in day 0: Sunday
            future.getDay()                     // Resultado: 4 ==> Day number 4: thursday
        Get hours, minutes and seconds
            future.getHours()                   // Resultado: 15
            future.getMinutes()                 // Resultado: 23
            future.getSeconds()                 // Resultado: 0
        Get the ISO string
            International Standard
            future.toISOString()                // Resultado: 2037-11-19T14:23:00.000Z
        Get timestamp
            future.getTime()                    // Resultado: 2142253380000
            Date.now()      // Obtain the timestamp until now
    Changing values
        Set Year
            future.setFullYear()                // Resultado: 2100
        Exists sets for all previous values

Operations with dates
    We convert to timestamp to realice operations
        +future                 // Resultado: 4130317380000
    Example
        const calcDaysPassed = (date1, date2) => Math.abs((date2 - date1) / (1000 * 60 * 60 * 24));
        calcDaysPassed(new Date(2037, 3, 14), new Date(2037, 3, 4));            // Resultado: 10

Internationalizing dates (IntL)
    JS has an API to transform dates depending the country
        day/month/year      ====>       month/day/year
    Creation
        new IntL.DateTimeFormat('LOCALS').format(DATE)
        new Intl.DateTimeFormat('en-US').format(new Date())             // Resultado: 07/03/2021
    Code locals table
        http://www.lingoes.net/en/translator/langcode.htm
    We can modify the INTL with differents propierties
        const options = {
            hour: 'numeric',
            minute: 'numeric',
            day: 'numeric',
            month: 'long',
            year: '2-digit',
            weekday: "long",
        };
        new Intl.DateTimeFormat('en-US', options).format(new Date())        // Resultado: Sunday, 7 March 21, 18:15
        new Intl.DateTimeFormat('es-ES', options).format(new Date())        // Resultado: domingo, 7 de marzo de 21, 18:15
    It is better adjust the internationalizing automatically
        const locale = navigator.language;                                  // Resultado: "en" or "es-ES" or whatever
        new Intl.DateTimeFormat(locale, options).format(new Date())

Internationalizing Numbers (IntL)
    Similar than dates
        new IntL.DateTimeFormat('LOCALS').format(NUMBER)
        new Intl.NumberFormat('es-ES').format(345654.45)                    // Resultado: 345.654,45
        new Intl.NumberFormat('us-GB').format(345654.45)                    // Resultado: 345,654.45
    It is posible change it with options
        const numberoptions = {
            style: 'unit',
            unit: 'mile-per-hour',
            // unit: "celsius",

            style: "percent"

            style: "currency"
            currency: "EUR",        Not affected by the local. It is necessary adjust manually
            useGrouping: false,     Without separator ( 3.500 = 3500)
        };
        new Intl.NumberFormat('es-ES', numberoptions).format(345654.45)                    // Resultado: 345.654,45 mi/h
        new Intl.NumberFormat('us-GB', numberoptions).format(345654.45)                    // Resultado: 345,654.45 mph

Timers: setTimeout and setInterval
    setTimeout
        Runs just once after a defined time
        We can use it to execute code at some point in the future
        Structure
            setTimeout(FUNCTION , MILLISECONDS, PARAMETERS);
            setTimeout( ()=>console.log('Here is your pizza') , 3000);
        The code no stops in the setTimeout, JS continue while setTimeout is background
        Example with parameters
            setTimeout( (ing1, ing2) => console.log('Here is your pizza'), 5000, 'olives', 'spinach');
        We can cancel the timer until the delay has actually passed
            if ( SOMETHING ) clearTimeout( TIMERNAME );
    setInterval
        Keeps running forever, until we stop it.
        Used when we want to do something every 10 seconds/minutes/hours
        Structure
            setInterval(FUNCTION , MILLISECONDS, PARAMETERS);
        Example
            setInterval(function () {
                const now = new Date();
                const hour = now.getHours();
                const minute = now.getMinutes();
                const second = now.getSeconds();
                console.log(`${hour}:${minute}:${second}`);
            }, 1000);
        We can cancel the timer
            if ( SOMETHING ) clearInterval( TIMERNAME );


---------------------- ADVANCED DOM AND EVENTS ----------------------

How the DOM really works
    Initial
        DOM: Document Object Model
        The DOM is the interface between all JS code and the browser, or more specifically HTML documents that are rendered in and by the browser
            JS  <---->  DOM (interface) <---->  Browser
    Definition
        DOM allows us to make JavaScript interact with the browser.
        We can write JavaScript to create/modify/delete HTML elements, set styles, classes and attributes, and listen/respond to events
        DOM tree is generated from an HTML document, which we can then interact with
        DOM is a very complex API(application program interface) that contains lots of methods and properties to interact with the DOM tree
            .querySelector()
            .addEventListener()
            .createElement()
            etc
    Organization
        Every single note in the DOM tree is of the type: node.
        Each node is represented in JS by an object. Which has access to different methods: textcontent, childnodes, etc
        Types of nodes
            Element
                <p></p>
                This type gives each HTML access to a ton of useful properties like: .innerHTML ; .classList ; etc
                This type has internally an HTML element, child type: HTMLElement
                    This HTMLElement itself has exactly one child type for each HTML element that exists in HTML
                        HTMLButtonElement ; HTMLDivElement ; etc
                        This differents child nodes has different methods: href ; etc
            Text
                Inside the Element ==> <p> Text </p>
                This is his own new node, separate from the Element node
            Comment
                <!-- -->
            Document
                .querySelector ; .createElement() ; etc
        Inheritance(herencia) of methods and properties
            Inheritance makes all work
            Inheritance means that all the child types will also get access to the methods and properties of all their parent node types
    Window Node
        Global object
        Lots of methods and properties
        Many unrelated to DOM
    EventTarget
        Way of the DOM of allowing all the node types to listen to events
            .addEventListener() ; .removeEventListener()
        Father of both the node type and also the window node type
    --> We DO NEVER CREATE an EventTarget object
    Scheme
        Event Target    ====> Window
                        ====> Node      ====> Element   ====> HTML Element  ====> HTMLButtonElement
                                        ====> Text                          ====> HTMLDivElement
                                        ====> Comment
                                        ====> Document
        theory-lectures-v2.pdf
            Slide 143

Selecting, creating and deleting elements ( TRABAJO )
    Selecting
        All the HTML
            document.documentElement
        Head
            document.head
        Body
            document.body
        Other elements
            document.querySelector()
            document.querySelectorAll()         ====> Generate a nodeList
        Get elements by ID
            document.getElementById()
        Get elements by tag name
            document.getElementsByTagName()     ====> Generate a live collection: updates automatically (if we delete something in the browser, the list actuallize)
        Get elements by class
            document.getElementsByClassName()
    Inserting
        .insertAdjacentHTML()
            document.querySelector('').insertAdjacentHTML(POSITIONtoATTACHinHTML, TEXT)
                Position to attach in HTML
                    'beforebegin': Before current element. Out of the element.
                    'afterend': After current element. Out of the element.
                    'afterbegin': Inside current element, after his first child element
                    'beforeend': Inside current element, before his last child element
            document.querySelector('.main').insertAdjacentHTML(afterbegin, "Prueba")
        .prepend()
            .prepend(document.createElement('div').innerHTML = 'We use cookies for improved functionality and analytics.';)
            Adds the element as the first child of this element
        .append()
            .append(document.createElement('div').innerHTML = 'We use cookies for improved functionality and analytics.';)
            Adds the element as the last child of this element
        If we want to insert the same element prepend and append
            .append( document.createElement('div').innerHTML = 'We use cookies for improved functionality and analytics.'.cloneNode(true) )
        .before()
            Same as prepend
        .after()
            Same as append
    Creating
        .createElement( ELEMENT )
            .createElement('div')
    Deleting
        .remove()
            document.querySelector(".boton").remove()
            Method very recent
        Before remove() we use
            document.querySelector(".boton").parentElement.removeChild(document.querySelector(".boton"))
            First select the parent node and later remove the child

Styles, attributes and classes
    Styles
        document.querySelector(".boton").style.PROPIERTY
        document.querySelector(".boton").style.backgroundColor = "blue
            This styles are writing in the HTML, not in the css archive.
                <button class="boton" style="background-color: rgb(55, 56, 61); width: 120%;" ></button>
                This is called Inline Styles
        It is not possible to read the propierties if they are in the css archive.
            console.log( document.querySelector(".boton").style.height );               // Resultado: ""
            Only we can read the styles if they are inline styles
    --> getComputedStyle
            It is possible to know the propierties in the css archive of the element using this method
            console.log( getComputedStyle(document.querySelector(".boton")).height );         // Resultado: 50px
        Other form to change properties styles
            document.documentElement.style.setProperty( PROPIERTYnAME, VALUE);
            document.documentElement.style.setProperty('--color-primary', 'orangered');
            document.body.style.setProperty('background-color', 'blue');
            It is better to use style.PROPIERTY
    Attributes
        src ; alt ; id ; class ; ...
        Select the attribute
            document.querySelector().src
            document.querySelector().alt
            document.querySelector().className
            If we create a non standar attribute, JS can't read it
                document.querySelector().nuevo
            But, exists one method to read this non-standard attribute
                document.querySelector().getAttribute('nuevo')
        Setting the value of the attribute
            document.querySelector().alt = '';
            document.querySelector().alt = 'Beautiful minimalist logo';
            document.querySelector().setAttribute(PROPIERTY, VALUE)
            document.querySelector().setAttribute('company', 'Bankist')
        Data attributes
            HTML    ==>     data-version-number="3.0"
            JS      ==>     qs.dataset.versionNumber        // Resultado: 3.0
    Classes
        qs.classList.add(' ' , ' ');
            --> qs.className = 'jonas'; ==!==> DON'T USE, OVERRIDE ALL THE EXISTING CLASSES
        qs.classList.remove(' ' , ' ');
        qs.classList.toggle(' ' , ' ');
        qs.classList.contains(' ' , ' ');

Implementing smooth scrolling
    Old School
        Know the coordinates
            .getBoundingClientRect()
            console.log(qs.getBoundingClientRect())         // Resultado: bottom: 1542, height: 1530, left: 0, right: 1024, top: 12, width: 1024, x: 0, y: 12
            The coordinates are relative to the visible view port. If we scroll the page, the coordinates will change
                Current scroll (x/y): window.pageXOffset, pageYOffset
                Height/width viewport: document.documentElement.clientHeight, document.documentElement.clientWidth
        Scrolling
            window.scrollTo(LEFTPOSITION , TOPPOSITION);                            // Relative to the viewport, NOT to the document
            window.scrollTo(s1coords.left, s1coords.top);
            To fixed the relative position we can add the current position
            window.scrollTo(LEFTPOSITION + window.pageXOffset, TOPPOSITION + window.pageYOffset);        // Absolute position
            window.scrollTo(s1coords.left, s1coords.top + window.pageYOffset);
        Smooth Scrolling
            We use the same scrollTo but we pass one object
            qs.addEventListener('click', function () {
                window.scrollTo({
                        left: qs.getBoundingClientRect().left + window.pageXOffset,
                        top: qs.getBoundingClientRect().top + window.pageYOffset,
                        behavior: 'smooth',
                })}
    Modern School. Only work in modern browsers
        Similar than old school but faster and without coordinates
            qs.addEventListener('click', function () {
                qs.scrollIntoView({ 
                    behavior: 'smooth' 
                })
            }

Types of events and event handlers
    Event: signal that is generated by a certain DOM node.
        addEventListener(TYPEEVENT, FUNCTION)       ----> Modern JS
            qs.addEventListener('click', function(){ console.log('clicking') } )
            Permit multiple events: qs.addEventListener("click", cl("1"));  qs.addEventListener("click", cl("2"));          // Resultado: 1, 2
            We can remove an event handler
        onTYPEEVENT = FUNCTION                      ----> OLD JS
            qs.onclick = function(){ console.log('clicking') };
            Override the events: qs.onlick = cl("1");  qs.onlick = cl("2");                                                 // Resultado: 2
            Can NOT remove an event handler
        Click mouse, mouse moving, triggering the full screen mode, etc
    Events
        https://developer.mozilla.org/en-US/docs/Web/Events
        https://developer.mozilla.org/en-US/docs/Web/API/Element
        The most importants are the "Mouse events" and the "Keyboards events"
        Type event: mouseenter  
            Work like "hover" in CSS
        Type event: mouseleave
            The opposite of mousenter
    Remove event listener
        Necesary the function was outside.
            const alertH1 = function () { console.log('Mouse OUT')};
        .removeEventListener inside the function
            const alertH1 = function(){cl, qs.removeEventListener(TYPEeventListener, alertH1)}
        It is possible remove after a while
            setTimeout(()=> qs.removeEventListener(TYPEeventListener, alertH1), milliseconds)
    Using HTML attribute
        This actually should NOT be used
        Define directly on HTML
            <h1 onclick="console.log('Mouse OUT') >Titulo</h1>

Event propagation: bubling and capturing ( Page 146 )
    Capturing phase
        The event is in the document, and travel allong the nodes until the target
            Document --> Element(html) --> El(body) --> El(section) --> El(p) --> El(a)
    Target phase
        Then the event reaches the target, the target phase begins.
        Event listeners wait for a certain event to happen on a certain element and as soon as the event occurs, it runs
            document.querySelector("a").addEventListener("click",function)        
    Bubling phase
        Then the event travel all the way up to the document route again
            Document <-- Element(html) <-- El(body) <-- El(section) <-- El(p) <-- El(a)
        So, we say that events bubble up from the target to the document route
    So as an event travels down and up the tree, they pass through all the parent elements but not through any sibling element
    This is very important bassically the event happen in all of the parent elements.
        If we attach the same event listener also to the parent element, then we would get the exact result
        document.querySelector("a").addEventListener("click",function)
        document.querySelector("p").addEventListener("click",function)
        document.querySelector("section").addEventListener("click",function)
    Now by default, events can only be handle in the targer and in the bubbling phase
    However, we can set up event listeners in a way that they listen to events in the capturing phase instead
    We can say that "events propagate from one place to another"
    Also not happen on ALL events
    So, if one element has one event listener and his parent has other event listening with the same type of event(click, mouseenter). Both will ocurr
        qs("button").addEventListener("click",function(){console.log("Child Node")})
        qs("section").addEventListener("click",function(){console.log("Parent Node")})
        <section>
            <button>Boton</button>
        </section>
        When we click on "Boton", the console show: Child Node, Parent Node
    Event target
        That triggers an event
        addEventListener("click", function(e){ console.log( e.target )})
    Current target
        Element on which the event is attached
        addEventListener("click", function(e){ console.log( e.currentTarget )})
        e.currentTarget === this
    Stop the event propagation
        We can stop the bubbling
        e.stopPropagation() in the function
        qs("button").addEventListener("click",function(){console.log("Child Node");e.stopPropagation()})
        qs("section").addEventListener("click",function(){console.log("Parent Node")})
        When we click on "Boton", the console show: Child Node
        NOT A GOOD IDEA TO STOP THE PROPAGATION
    Capturing phase propagation
        addEventListener only ocurr in bubling phase but, we can change it
            addEventListener("click", function, false)          // Capturing in bubling phase(default)
            addEventListener("click", function, true)           // Capturing in capture phase
        The result is the same but the path is the other way around

Event delegation: implementing page navigation
    We put the event listener on a common parent of all the elements that we are interested
    Not possible to attach listeners to element that not exists in the HTML, but we can create a listener to the parent and create dynamically the element who trigger it
    Steps
        1. We add the event listener to a common parent element of all the elements that we're interested in
        2. Determine what element originated the event ====> e.target
    Matching strategy
        It is goot to check if the target element contains the class that we are interested in
        Because, if we click in the element parent, and not in the chil that we are interested, the event trigger
    Example
        document.querySelector(PARENT).addEventListener('click', function (e) {
            e.preventDefault();
            // Matching strategy
            if (e.target.classList.contains(CHILD)) {
                document
                    .querySelector(e.target.getAttribute('href'))
                    .scrollIntoView({ behavior: 'smooth' });
            }
        });

DOM traversing
    Is walking through the DOM. Which means that we can select an element based on another element.
    Is very important because sometimes we need to select elements relative to a certain other element
        A direct child or a direct parent element
        Sometimes we don't even know the structure of the DOM at runtime
    Going downwards: selecting the Childs
        document.querySelector(PARENT).querySelector(CHILD)
        document.querySelector(PARENT).querySelectorAll(CHILD)
        No matter how deep these child elements would be inside the parent element
        document.querySelector(".padre1").querySelectorAll(".hijo")
        If exist more ".hijo" in the document, they will not be selected because they are not childs of ".padre1"
        Know the child elements
            qs.childNodes       Give all the child nodes(whether or not they have class). Not very used
            qs.children         Give all only the elements. Only for direct childs
        First and last element child
            qs.firstElementChild
            qs.lastElementChild
    Going upwards: selecting parents
        Direct parent
            qs.parentNode
            qs.parentElement
    --> Not direct parent
            qs.closest("PARENT")
            Very used in event delegation
            Is the "opposite" of querySelector
    Going sideways: selecting siblings
        We can only access direct siblings, basically only the previous and the next one
        Elements
            qs.previousElementSibling
            qs.nextElementSibling
        Nodes: Not very used, better option working with elements
            qs.previousSibling
            qs.nextSibling
        For all the sibling
            qs.parentElement.children

Passing arguments to event handlers
    Structure of the listener for 1 parameter
        qs.addEventListener('click', FUNCTION.bind( PARAMETER ));
    Structure of the function for 1 parameter
        const logueando = function (e) {
            console.log( this );
        };
    Structure of the listener for more than 1 parameter
        qs.addEventListener('click', function(){ FUNCTION( PARAMETERS ) });
    Structure of the function for more than 1 parameter
        const logueando = function (parameter1, parameter2) {
            console.log( parameter1 , parameter2 );
        };

Implementing a sticky navigation: the scroll event (NOT USE)
    NOT use this scroll event because fire all the time, no matter how small the change is here in the scroll.
        Bad performance, specifically in mobile
    When window is larger than initial coords section (depends of the windows itself), add the class "sticky" in CSS.
        const initialCoords = qs(".section1").getBoundingClientRect();
        window.addEventListener('scroll', function () {
            if (window.scrollY > initialCoords.top) {
                nav.classList.add('sticky');
            } else {
                nav.classList.remove('sticky');
            }
        });

Implementing a sticky navigation: intersection observer API
    Much better method than previous
    This API allows our code to observe changes to the way that a certain target element intersects another element or the way it intersects the viewport
    Creation
        const observer = new IntersectionObserver(observerCallBack, observerOptions);
    observerCallBack
        This function will get called each time that the observer element, or our target element.
        It's intersecting the root element at the threshold that we defined.
        No matter if we are scrolling down or up.
            const observerCallBack = function (entries, observer) {
                console.log("HEY");
            };
    observerOptions
        Object formed by two propierties
        const observerOptions = {
            root: null,                     // Is the element that the target is intersecting. null == viewport
            rootMargin: "+/-90px"           // Margin around the root.
            rootMargin: "-90px"             // The function fires 90px before the threshold was actually reached
            threshold: 0.1,                 // Is the percentage of intersection at which the observer callback will be called(0.1===10%)
            threshold: [0.1, 0.5, 0.8],     // Can be exist multiple threshold
            threshold: [0, 1],              // 0: Before it is seen // 1: After it is seen
        };
    Calling the observer
        observer.observe(TARGETELEMENT);
        observer.observe(section1);

Revealing elements on scroll
    The animation actually comes from CSS
    We will achieve this by simply adding a class to each of the sections
        .section--hidden {
            opacity: 0;
            transform: translateY(8rem);
        }
        It is better to add and remove the class with JS because a lot of people disable JS and this people don't see the web
    It works using the intersection observer API
        const revealSection = function (entries, observer) {
            const [entry] = entries;
            if (!entry.isIntersecting) return;
            entry.target.classList.remove('section--hidden');
            // When the observer do it work, disable the observer
            observer.unobserve(entry.target);
        };
        const sectionObserver = new IntersectionObserver(revealSection, {
            root: null,
            threshold: 0.15,
        });
        We add the hidden class and put the observer for each section
        qs.forEach(function (section) {
            sectionObserver.observe(section);
            section.classList.add('section--hidden');
        });

Lazy loading images
    Very important to optimice the images in the web ==> Lazy Loading Images
    For low resolution images we use in the HTML (1KB)
        src=".../image.jpg"
    For the same image but with more resolution in the HTML (10MB)
        data-src=".../imageHD.jpg"
    Those names are not standards but it is good to use it for simplicity
    Filter in CSS for low resolution images
        .lazy-img {
            filter: blur(20px);
        }
    It is very important to use this for better perfomance for users with low internet
    We use the intersection observer API
        We only select the img with the property "data-src" which have the blur effect
        const imgTargets = document.querySelectorAll('img[data-src]'); 
        const loadImg = function (entries, observer) {
            const [entry] = entries;
            if (!entry.isIntersecting) return;
            // Replace the src with data-src
            entry.target.src = entry.target.dataset.src;
            // Remove the blur filter. We remove the class blur after load the new image with the event listener. Pretty effect
            entry.target.addEventListener('load', function () {
                entry.target.classList.remove('lazy-img');
            });
            observer.unobserve(entry.target);
        };
        const imgObserver = new IntersectionObserver(loadImg, {
            root: null,
            threshold: 0,
            rootMargin: '200px',           // To start loading before the user arrives
        });
        // Add the observer for each image
        imgTargets.forEach(img => imgObserver.observe(img));

Lifecycle DOM events
    Lifecycle: the page is first accessed until the yser leaves it
    DOM content loaded event
        Fired by the document as soon as the HTML is completely parsed(HTML has been downloaded and been converted to the DOM tree)
        Not wait for images and other external resources to load. Just HTML and JS need to be loaded.
        Al scripts must be downloaded and executed before the DOM content loaded event can happen
            document.addEventListener("DOMContentLoaded", function (e) {})
        Important to load the JS after the page loaded at 100% when we call the JS at the beginning in the HTML
            <script src="script.js"></script>       Line 15: we put all the JS code inside that listener and when the page was parsed, JS will run
            <script src="script.js"></script>       Line 400: Not necesary this listener. At the end of all.
        This event in modern JS (DOM content loaded event) is the equivalent of "document.ready" in JQuery
    Load Event
        Fired when all the page was downloaded: CSS, images, external resources, ect
            window.addEventListener('load', function (e) {})
    Before unload event
        Created immediately before a user is about to leave a page. For example: after clicking the close button in the browser
            window.addEventListener('beforeunload', function (e) {}
        We can use this event to ask users if they are 100% sure that they want to leave the page
            e.preventDefault();
            console.log(e);
            e.returnValue = ''; Not possible to personalice the message, because a lot of people abuse of this

Efficient script loading: defer and sync (Page 149)
    We can write the script tag in the head of the HTML or in the body end
        <head>
            <script src="script.js">
        </head>
        <body>
            ...
            <script src="script.js">
        </body>
    Regular
        Example
            <script src="script.js">
        Head
            1. Start parsing HTML
            2. Stop parsing HTML: Read and execute the scripts JS
            3. Finish parsing HTML
            4. DOMContentLoaded
            ---- Parsing HTML ----> Wating (read and execute JS) ----> Finish parsing HTML
            This is not very efficient because the parse stop and this impact on the pages performance.
            NEVER include the script JS in the head
        Body End
            1. Parsing all the HTML
            2. Without waiting: Read and execute the scripts JS
            3. DOMContentLoaded
            ---- Parsing HTML ----> Read and execute JS
            The parse HTML no stop and this is better for pages performance.
            ALWAYS include the script JS in the body end
            But this is is no perfect for asynchronous
        --> Used when
                Use if you need to support old browsers
    Async
        Example
            <script async src="script.js">
        Head
            1. Parsing HTML and read the scripts JS
            2. Stop parsing HTML: Execute the scripts JS
            3. Finish parsing HTML
            4. DOMContentLoaded
            ---- Parsing HTML and read JS ----> Wating (execute JS) ----> Finish parsing HTML
            The parsing HTML and the reading of the scripts JS working at the same time but still stopping for executing the JS
            Beter performance than regular
            Usually the DOMContentLoaded event waits for all scripts to execute, except for async scripts. So, DOMContentLoaded fires after async scripts execute
                Parsing HTML------------
                Execute normal JS-------
                                        DOMContentLoaded
                Execute async JS------------------                        
            Scripts not guaranteed to execute in order
        --> Used when
                Use for 3rd-party scripts where order doesn’t matter (e.g. Google Analytics)
        Body End
            Don't make sense because the read and the execution happen at the end and "async" makes no sense here
    Defer (aplazar)
        Example
            <script defer src="script.js">
        Head
            1. Parsing all the HTML and read the scripts JS
            2. Without waiting: Execute the scripts JS
            4. DOMContentLoaded
            ---- Parsing HTML and read JS ----> Execute JS
            The parsing HTML and the reading of the scripts JS working at the same time and JS execute upon finished the parsing HTML
            Similar performance than async but the parsing is never interrupted and many times we wan't this.
            DOMContentLoaded event fires after defer script is executed
                Parsing HTML------------
                Execute normal JS-------
                                                DOMContentLoaded
                Execute async JS----------------
            Scripts are executed in order
        --> Used when
                This is overall the best solution! Use for your own scripts, and when order matters (e.g. including a library)
        Body End
            Don't make sense because the read and the execution happen at the end and "defer" makes no sense here
    You can, of course, use different strategies for different scripts.
        Usually a complete web applications includes more than just one script.
        In all browsers ignore the async and defer
         

---------------------- OBJECT ORIENTED PROGRAMMING (OOP) WITH JS ----------------------

What is object-oriented programming? (Page 153)
    Definition
        Object-oriented programming (OOP) is a programming paradigm(style of code, “how” we write and organize code) based on the concept of objects.
        We use objects to model/describe real-world (E.g. user or todo list item) or abstract(E.g. HTML component or data structure) features.
        Objects may contain data (properties) and code (methods). By using objects, we pack data and the corresponding behavior into one block.
            const user = {
                user: "Jonas",
                pass: "1234",
                login(pass){},
                sendMessage(str){}
            }
        In OOP, objects are self-contained pieces/blocks of code.
        Objects are building blocks of applications, and interact with one another.
        Interactions happen through a public interface(=API): methods that the code outside of the object can access and use to communicate with the object.
        OOP was developed with the goal of organizing code, to make it more flexible and easier to maintain (avoid “spaghetti code”)
    Classes and instances (traditional OOP)
        Conceptual overview: it works a bit differently in JavaScript. Still important to understand!
        Class: Like a blueprint from which we can create new objects.
            User {
                user,
                pass,
                email
                login(pass){},
                sendMessage(str){}
            }
        Instance: New object created from the class. Like a real house created from an abstract blueprint
            new User("Jonas")                   new User("Pepe")
            {                                   {
                user: "Jonas",                      user: "Pepe",
                pass: "1234",                       pass: "truco",
                email: "jonas@jose.com"             email: "pepe@jose.com"
                login(pass){},                      login(pass){},
                sendMessage(str){}                  sendMessage(str){}
            }                                   }
        Just a representation, NOT actual JavaScript syntax! JavaScript does NOT support real classes like represented here.
    The 4 fundamental OOP principles
        Abstraction
        Encapsulation
        Inheritance
        Polymorphism
    Abstraction
        Ignoring or hiding details that don’t matter, allowing us to get an overview perspective of the thing we’re implementing, instead of messing with details that don’t really matter to our implementation.
        Real phone{
            charge,
            volume,
            voltage,
            temperature,
            homeBtn(){},
            volumeBtn(){},
            screen(){},
            verifyVolt(){},
            verifyTemp(){},
            ...
        }           These are the complete features of a phone.
        Abstracted phone{
            charge,
            volume,
            homeBtn(){},
            volumeBtn(){},
            screen(){},
        }           These are the features a user needs, but the phone still using all the features. This is the abstraction
        Another example is "addEventListener", we don't know how really works but, we use it and we don't need to know how really works.
    Encapsulation
        Keeping properties and methods private inside the class, so they are not accessible from outside the class.
        Some methods can be exposed as a public interface (API).
        Why?
            Prevents external code from accidentally manipulating internal properties/state.
            Allows to change internal implementation without the risk of breaking external code.
        Example (NOT actually JavaScript syntax, the private keyword doesn’t exist)
            user{
                user,                           Accesible from outside the class
                private pass,                   NOT accessible from outside the class
                private email,                  NOT accessible from outside the class
                login(pass) {
                    this.pass === word          STILL accessible from within the class
                }
                private checkSpam(src){}        NOT accessible from outside the class
                comment (str){
                    this.checkSpam              STILL accessible from within the class
                }
            }
    Inheritance
        Making all properties and methods of a certain class available to a child class, forming a hierarchical(jerarquico) relationship between classes.
        This allows us to reuse common logic and to model real-world relationships.
        Example
            PARENT CLASS                            CHILD CLASS (an admin is also a user)
            User {                                  Admin {
                user,               --Inherited-->      user,
                pass,               --Inherited-->      pass,
                email,              --Inherited-->      email,
                                                        permissions,        OWN propierty
                login(pass){},      --Inherited-->      login(pass){},
                sendMessage(str){}, --Inherited-->      sendMessage(str){},
                                                        deleteUser(){}      OWN method
            }                                       }
        Child class extend parent class (own propierties and methods)
    Polymorphism
        A child class can overwrite a method it inherited from a parent class [it’s more complex that that, but enough for our purposes]
        Example
            PARENT CLASS                            CHILD CLASS
            User {                                  Author {
                user,                                   user,
                pass,                                   pass,
                login(pass){                            login(pass, key){
                    Logic           --Polymorphism-->       Other logic     OWN method, overwriting the parent class
                },                                      },
            }                                       }
        Overwrite the parent method in the child class, not the parent method in the parent class.

OOP in JavaScript
    Classical OOP: classes
        Class       --instantiation-->                      Instance
        Objects (instances) are instantiated from a class, which functions like a blueprint.
        Behavior(comportamiento)(methods) is copied from class to all instances.
    JS use functions (called constructors) as classes.
    Constructor
        Function design to create objects from a base.
        Invoked used the "new keyword"
        Example
            const Person = function ( PAR1, PAR2, etc){
                this.PROP1 = PAR1, // For standar, we use the same name to parameters and propier
                this.name = name,
            }
    JS OOP: prototypes
        Prototype   <--prototypal inheritance/delegation--  Object
            Prototype contains methods and propierties
            Object can access methods and propierties
        Objects are linked to a prototype object.
        Prototypal inheritance: The prototype contains methods (behavior) that are accessible to all objects linked to that prototype.
        Behavior is delegated to the linked prototype object.
        Example
            const num = [];
            num.map();
                In MDN web docs
            Array.prototype.map()
                Array.prototype is the prototype of all array that we create in JavaScript. All arrays have access to the map method.
            Therefore, this "num" array cointains all the array methods, including map(), lenght, concat(), etc
        It means that all arrays are linked to "array.prototype" and it has access to all the methods defined on the "array.prototype" object.
    The 4 pillars of OOP are still valid!
        Abstraction
        Encapsulation
        Inheritance
        Polymorphism
    3 ways of implementing prototypal inheritance in JS
        “How do we actually create prototypes? And how do we link objects to prototypes? How can we create new objects, without having classes?”
            How do we implement OOP in JS?
        Constructor functions
            Technique to create objects from a function.
            This is how built-in objects like Arrays, Maps or Sets are actually implemented.
        ES6 Classes
            Modern alternative to constructor function syntax.
            Called “Syntactic sugar” instead of constructor functions. Behind the scenes, ES6 classes work exactly like constructor functions.
            ES6 classes do NOT behave like classes in “classical OOP”.
        Object.create()
            The easiest and most straightforward(directamente) way of linking an object to a prototype object.
            Not as used as the other methods.

Construction functions and the NEW operator
    Contruction functions always start with Capital letter.
    Arrow functions not work as a function cosntructor because it has NOT this own "this keyword".
    Only function expresions and functions declarations
    The only difference between a regular function and a constructor function is that we call the constructor using the "new keyword"
        new Person('Jonas', 1990);
    Steps
        1. New empty object is created.
        2. The function is called and in this function call, the "this keyword" will be set to this newly created object
        3. This newly created object is linked to a prototype.
        4. The function automatically return that empty object from the beginning, but no longer needs to be empty.
            This is the trick of making the Construction function work.
    Example prototype
        const Person = function (firstName, birthYear) {
            this.firstName = firstName;
            this.birthYear = birthYear;
        };
    Creating objects
        const jonas = new Person('Jonas', 1990);
        const matilda = new Person('Matilda', 1997);
        const jack = new Person('Jack', 1975);
    We can say (not at all correct) that "jonas" is an instance/object of the class "Person"
        console.log(jonas instanceof Person);               // Resultado: true
        console.log("Jose" instanceof Person);              // Resultado: false
    Methods
        Incorrect use of methods. NEVER create a method inside of a constructor function.
            Because we create a thousands of objects with thousands of copies of the function.
            This is terrible for performance
            const Person = function (firstName, birthYear) {
                this.firstName = firstName;
                this.birthYear = birthYear;
                this.calcAge = function () {
                    cl(2021-this.birthYear)
                }
            };

Prototypes
    Each and evey function in JS has a propierty called prototype
        Includes constructor functions
    Every object that's created by a certain constructor function will get access to all the methods and propierties that we define on the constructors prototype property
    Set methods to prototype
            Person.prototype
            Person.prototype.calcAge = function () { };
        Example
            jonas = { name: "Jonas", birthYear: 1990 }
            Person.prototype.calcAge = function() { console.log(2021 - this.birthYear) };
            jonas.calcAge();                                                                    // Resultado: 31
            Person.calcular = function() { console.log(2021 - this.birthYear) };
            jonas.calcular();                                                                   // Resultado: Error
        So, jonas has NOT "calcAge" but it can access to the method. Prototypal inheritance
     -->We can create a lot of objects without methods inherited by the class, but we can still access and improve the performance without creating copies of the methods in    each object
        In summary, to create methods for objects in classes, the best solution is
            Class.prototype.FUNCTION = function () {}
        The objects no create copies of the method but, they can access an use it
        How and why does this work?
            It works because any object always has access to the methods and propierties from its prototype.
                The prototype of jonas is "Person.prototype"
                console.log(jonas.__proto__); ==> The prototype of jonas
            The prototype of the jonas object is essentially the prototype property of the constructor function
                console.log(jonas.__proto__ === Person.prototype);                  // Resultado: true
                Person.prototype is not the prototype of Person, but instead, it is what's gonna be used as the prototype of all the objects that are created with the person   constructor function.
                console.log(Person.prototype.isPrototypeOf(jonas));                 // Resultado: true
                console.log(Person.prototype.isPrototypeOf(Person));                // Resultado: false
        Is better keep in mind, only in mind(not work)
            .prototype === .prototypeOfLinkedObjects
    Set propierties to prototype
        Creation
            Person.prototype.species= "Homo Sapiens"
            console.log(jonas);                                 // The "species" propierty is in "__proto__"
            console.log(jonas.species);                         // Resultado: Homo Sapiens
        Check if properties are own or prototypes
            jonas.hasOwnProperty('firstName')                   // Resultado: true
            jonas.hasOwnProperty('species')                     // Resultado: false

Prototypal inheritance and the prototype chain (Page 167)
    How it works with function constructors and ES6 classes? (Not with "object.create()"
        1. An empty object is created.
        2. "This keyword" in constructor function call is set to the new object.
        3. The new object is linked (__proto__ property) to the constructor function’s prototype property.
        4. The new object is returned from the constructor function call.
        So, when JS look a method, first look inside the object
            jonas.calcAge()
        But, jonas object has NOT the method
            jonas={ name: "Jonas", birthYear: 1991 }
        JS, look inside the __proto__ of the object and there it is found the method.
        So, __proto__ linked the object with his prototype
        This looking in the prototype is called "Prototypal Inheritance/Delegation"
     -->It is a lot of powerfull for 1.000 object pointing to the same prototype, because we DON'T have 1.000 methods, only 1 used by all the objects.
    Prototype chain
        Is the fact that the object is connected to a prototype and the ability of looking up methods and properties in a prototype.
            Constructor function    --.prototype-->     Prototype
            [Person()]              <--.constructor--   [Person.prototype]
        But, the classes that we create has his own prototypes itself which have his own methods predefined.
            Object  --.__proto__-->     Prototype       --.__proto__-->     Prototype
            jonas   --.__proto__--> Person.prototype    --.__proto__--> Object.prototype
        For example
            jonas.hasOwnProperty()
            1. JS look inside the object "jonas" for the method "hasOwnProperty" but don't exists
            2. JS look inside the prototype of "jonas" for the method, so look inside "Person" but don't exists
            3. JS look inside the prototype of the prototype of "jonas", so look inside "Object" and finds "hasOwnProperty" inside it and execute.
        So, prototype chain is very similar to scope chain. Series of links between objects, linked through prototypes
            Object  --.__proto__-->     Prototype       --.__proto__-->     Prototype
            jonas   --.__proto__--> Person.prototype    --.__proto__--> Object.prototype
            >>>>>>--------------------Prototype Chain---------------------------->>>>>>

Prototypal Inheritance on Built - in objects
    Arrays
        const lista = [3, 6, 4, 5, 6, 9, 3]
        lista.__proto__ === Array.prototype     // Resultado: true
    The arrays are objects
        lista.__proto__.__proto__ is very similar than jonas.__proto__.__proto__
    -> We can add methods to Arrays and use with inherite
        Array.prototype.NAME = FUNCTION () {}
        Array.prototype.unique = function () { return [...new set(this)]; }
        console.log(lista.unique());            // Resultado: [3, 6, 4, 5, 9]
        But, extending the prototype is NOT a good idea.
            For small proyects where only work one person it is acceptable.
            For huge proyects or multiple people are not a goot idea (example: the next version of JS may add a function with the same name)
    The cause of we can call methods on fuctions it's because the functions are objects and objects have prototypes
        console.dir(x => x + 1);        // __proto__ ==> Object.prototype

ES6 classes
    Allow us to do exact the same thing (add methods to constructor functions) but using a NICER and more MODERN syntax.
    It is more similar than classes in Java.
    Creation
        const NAME = class {}   // Class expression
        class NAME {}           // Class declaration
                                Class are a special type of functions, therefore it has declaration and expresion
    The class need a method called Constructor, that works exactly equal than later
        class NAME {
            constructor ( PARAM1, PARAM2, etc){
                this.PARAM1=PARAM1;
                this.PARAM2=PARAM2
            }
        class PersonCl {
            constructor(firstName, birthYear) {
                this.firstName = firstName;
                this.birthYear = birthYear;
            }
        }
    Creating an object
        const OBJECT = new NAME (PARAMETERS)
        const jessica = new PersonCl ("Jessica", 1980)
    Adding methods to the class
        class NAME {
            constructor(){}
            METHOD ( PARAMS ) { }
        }
        class PersonCl {
            constructor(firstName, birthYear) { }
            calcAge() {
                console.log(2021 - this.birthYear);
            }
        }
        PersonCl.prototype.calcAge = function () { cl(2021 - this.birthYear) }
    When we create a new object, the methods of the class are NOT copied to the object.
        Methods will be added to .prototype property
        jessica has only propierties, not methods.
        jessica.__proto__ has the method "calcAge"
  --> Important things
        Classes are NOT hoisted
            We CAN'T use classes before they are declared in the code
        Classes are first-class citizens
            We can pass them into functions and also return them from functions
        Classes are always executed in strict mode
        
Setters and Getters
    Are functions that get and set a value. But they are used like propierties
    Structure
        const OBJECT = {
            get FUNCTION () {}
            set FUNCTION (1PARAMETER) {}
        }
        const account = {
            movements: [200, 500, 120, 300],
            get latest() {
                return this.movements.slice(-1);
            },
            set latest(mov){
                this.movements.push(mov)
            }
        }
    Calling get
        Like a propierty
        OBJECT.FUNCTION
        account.latest
    Using set
        Like a property
        OBJECT.FUNCTION = VALUE
        account.latest = 50
    -->Is more common use "getMETHOD"/"setMETHOD" than "get METHOD"/"set METHOD"
        const account = {
            movements: [200, 500, 120, 300],
            getlatest() {
                return this.movements.slice(-1);
            },
            setlatest(mov){
                this.movements.push(mov)
            }
        }

Static methods
    Are methods attached to the constructor, NOT attached to the prototype.
    Example
        Array.from()            // work
        [1,2,3].from()          // Don't work
    Developers know that it is related to Arrays.
    We also say that the "from method" is in the Array name space. We used that term before for some methods in the number and in the internationalization name space.
        Number.parseFloat()     // Another static method
    We usually use these kind of as helpers that should be related to a certain constructor.
    Creating
        class CLASE{
            static FUNCTION () {}
        }
        CLASS.FUNCTION = function () {}
    Instance and static methods
        class CLASE {
            Static methods
            static FUNCTION () {}
            Instance methods
            FUNCTION () {}
        }
    The static methods are NOT avaible on instance methods.
    Static methods sometimes are still useful to implement some kind of helper function about a class or about a constructor function

Object.create (Page 170)
    Work different than constructor functions and classes.
    Still the idea of prototypal inheritance, however there are NO prototype propierties involved and also NO constructor functions and NO new operator.
    We use object.create to manually set the prototype of an object to any other object that we want.
    This gonna be literally the prototype of all the person objects. Example
        const personProto = {
            calcAge() {
                console.log(2021 - this.birthYear);
            },
        };
    Create
        const OBJECT = Object.create(CLASSPROTOTYPE)
        const steven = Object.create(personProto)
    Constructor functions
        The object point to the prototype of the constructor function
        Constructor function[Person()]     --.prototype-->     Prototype[Person.prototype]
        object[jonas]   --.__proto__-->   Prototype[Person.prototype]
    Object.create
        The object point to the constuctor function
        object[steven] --.__proto__-->    Prototype[personProto]
    --> In real work this is de LEAST used way of implementing prototypal inheritance.
    Is important to know it because, we found in the real world.
    --> We need Object.create to link prototypes, to implement inheritance between classes.
    Better way to create object with this function
        const personProto = {
            init(firstName, birthYear) {
                this.firstName = firstName;
                this.birthYear = birthYear;
            },
            calcAge () {}
            greet () {}
        };
        const sarah = Object.create(personProto)
        sarah.init("Sarah", 1985)
        sarah.calcAge()
        sarah.__proto__ === personProto         // Resultado: true

Inheritance between classes: Constructor Functions (Page 174)
    Allow objects to inherit methods from its prototypes.
    For example: Class person (parent) and class student(child)
        Student are a person but more specific type of person.
    Structure
        const student = function (firstName, birthYear, course){
            Person.call(this, firstName, birthYear);                // We neeed to use "call" for select correctly the "this keyword"
            this.course = course
        }
    This form only connect the propierties, for connect the prototypes it is necesary to use "Object.create()". And it MUST be created before all the methods
        Student.prototype = Object.create(Person.prototype)
        Not work if we use: Student.prototype = Person.prototype Because not inherit, we say both are the same.
    When we do Object.create() we can use all the methods in prototype chain using inheritance
    Prototype chain
        Object[mike] ---> Prototype[Student.prototype] ---> Prototype[Person.prototype] ---> Prototype[Object.prototype] ---> null
    Doing Object.create() the constructor of Student is Person, but should be Student. For fixed this error:
        Student.prototype.constructor = Student

Inheritance between classes: ES6 Classes
    Structure
        class CHILD extends PARENT {
            constructor(PARAMETERS){
                super(PARAMETERS)
            }
        }
        class StudentCL extends PersonCl {
            constructor(fullName, birthYear, course){
                super(fullName, birthYear)
                this.course = course;
            }
        }
        const martha = new StudentCl('Martha Jones', 1999, 'Computer Science');
    Extends keyword
        The prototype chain was set up automatically by the "extends keyword"
    The super function
        Is the cosntructor function of the parent class
        Always needs to happen first. Because this call to the super function is responsible for creating the "this keyword" in this subclass
    Is not necesary the constructor function in subclasses if we not write new parameters, call automatically to the parent constructor.
        class StudentCL extends PersonCl {
        }
        const martha = new StudentCL("Martha Jones", 1999)
    -->This form of inheritance can be very problematic and dangerous in the real world when we are designing software.
        Functional programming.

Inheritance between classes: Object.create()
    Structure
        1. Conecting with the parent class
        const StudentProto = Object.create(personProto);
        2. Creating the "constructor function"
        StudentProto.init = function (firstName, birthYear, course) {
            3. Calling the constuctor function of the parent class
            personProto.init.call(this, firstName, birthYear);
            4. Creating the new parameters of the subclass
            this.course = course;
        };
        5. Creating objects in the new subclass
        const jay = Object.create(StudentProto);
        6. Calling the constructor
        jay.init('Jay', 1989, 'Computer Science');
    The methods of the parent inherit to the child
        jay.calcAge()       // Works
    -->Developers think that this is better to create a fake subclass because in JS we are not creating fake subclasses, we are linking objects.
    -->ES6 classes and constructor functons are more used in the real world

Encapsulation: protected properties and methods
    Prevent code from outside of a class to accidentally manipulate our data inside the class.
        The code is not changing
    When we expose only a small interface so a small API consisting only of a few public methods, then we can change all the other internal methods with more confidence.
        The pin is not accesible to the public
    JS classes do NOT yet support real data privacy and encapsulation. We do fake encapsulation by using a convention
        this._pin = pin         // NOT trully private, it is just a convention. Developers agree to use and everyone does it this way.
        _protectedMethod () {}
    Is not accesible "acc1.pin" but it is still accesible "acc1._pin". 
    Everyone in our team (and myself) will know that this property or method is not supposed to be touched outside of the class

Encapsulation: private class fields and methods
    Truly private class fields and methods.
    NOT supported in JS YET.
        Currently in class field stage 3
        In the future we will class field stage 4 and it is possible than real private classes supported in JS
    Class fields
        In real OOP like Java, propierties are usually called fields.
    Instance and prototype (in the console of the browser to understand better)
        acc1{
            currency: "EUR"
            locale: "en"
            owner: "Jonas"
            pin: 1111
            __proto__
                constructor:
                deposit:
                getMovements:
        }
        Everything that is outside of __proto__ is the instance
    Public fields
        class account {
            locale = navigator.language
            constructor(){}
        }
        Without let or const
    Private fields
        Truly private. At the moment, only Google Chrome support these.
        class account {
            #movements = [];
            constructor(){}
        }
        We use the "#"
        Error message: Private field '#movements' must be declared in an enclosing class.
            This message would be change because private fields are still on process.
        If we define a private field but it is also a parameter, it is necesary to create first empty.
        class account {
            #pin;
            constructor(pin){
                this.#pin = pin
            }
        }
        acc1{
            owner: "Jonas"
            #pin:
            __proto__
                constructor:
        }
    Public methods
        Nothing new, all the traditional methods
        class account {
            deposit(value) {}
            withdraw(value) {}
        }
    Private methods
        Sintax is exactly the same than private fields
        class account {
            #approveLoan(value) {}
        }
        Not appears on the prototype. Only in the instance.
        acc1{
            #approveLoan:
            __proto__
                constructor:
                deposit:
        }
    Static methods
        It is private because this static methods will not be avaible on all the instances, only on the class itself.
        class account {
            static helper() {}
        }
        Not very important. Only to know that exist.

Chaining methods
    To use chaining methods we need to return this in the methods
    acc1.deposit(300).deposit(500).withdraw(35).requestLoan(25000).withdraw(400);       // Error
    class Account {
        constructor(owner, currency, pin) {}
        deposit(value) {
            this._movements.push(value);
            return this;
        }
        withdraw(value) {
            this.deposit(-value);
            return this;
        }
    }
    acc1.deposit(300).deposit(500).withdraw(35).requestLoan(25000).withdraw(400);       // Not an error.

ES6 classes summary
    Classes are just “syntactic sugar” over constructor functions.
    Classes are not hoisted.
    Classes are first-class citizens.
    Class body is always executed in strict mode.
    class StudentSummary extends Person {
        // Person ==> Parent class
        // extends ==> Inheritance between classes, automatically sets prototype chain connecting child and parent.
        // StudentSummary ==> Child class
        university = 'University of Lisbon'; // Public field (similar to property, available on created object)
        #studyHours = 0; // Private fields (not accessible outside of class)
        #course;
        static numSubjects = 10; // Static public field (available only on class)
        // Constructor method, called by new operator. Mandatory in regular class, might be omitted in a child class
        constructor(fullName, birthYear, startYear, course) {
            super(fullName, birthYear); // Call to parent (super) class (necessary with extend). Needs to happen before accessing this.
            this.startYear = startYear; // Instance property (available on created object)
            this.#course = course; // Redefining private field
        }
        // Public method
        introduce() {
            console.log(`I study ${this.#course} at ${this.university}`);
        }
        study(h) {
            // Referencing private field and method
            this.#makeCoffe();
            this.#studyHours += h;
        }
        // Private method (Might not yet work in your browser. “Fake” alternative: _ instead of #)
        #makeCoffe() {
            return 'Here a coffe for you!';
        }
        // Getter method
        get testScore() {
            return this._testScore;
        }
        // Setter method (use _ to set property with same name as method, and also add getter)
        set testScore(score) {
            this._testScore = score <= 20 ? score : 0;
        }
        // Static method (available only on class. Can not access instance properties nor methods, only static ones)
        static printCurriculum() {
            console.log(`There are ${this.numSubjects} subjects`);
        }
    }
    // Creating new object with new operator
    const student = new StudentSummary('Jose', 1990, 2020, 'Medicine');


---------------------- MAPTY APP: OOP, GEOLOCATION, EXTERNAL LIBRARIES, AND MORE! ----------------------

How to plan a Web Project
    Project Planning (small and medium projects)
    Planning Step
        1. User Stories
            Description of the application’s functionality FROM the USER´S PERSPECTIVE. All user stories put together describe the entire application.
            Common format: As a [type of user], I want [an action] so that [a benefit]
                [type of user] == Who? Example: user, admin, etc.
                [an action] == What?
                [a benefit] == Why?
                As a [user], I want [to see all my workouts when I leave the app and come back later], so that [I can keep using there app over time]
        2. Features
            With the user stories we obtain the features that we need to implement.
        3. Flowchart
            WHAT we will build
            In the real-world, you don’t have to come with the final flowchart right in the planning phase. It’s normal that it changes throughout implementation!
            It's a good idea to start with events: Page loads, user clicks on button 1, user submits new form, etc
        4. Architecture
            HOW we will build it
    Development step
        Implementation of our plan using code

Using the geolocation API
    Structure
        navigator.geolocation.getCurrentPosition(POSTION, IFERROR)
    Obtain coordinates
        const { latitude } = position.coords;
        const latitude = position.coords.latitude;
        const { longitude } = position.coords;
        const longitude = position.coords.longitude;
    Linking coordinates with Google maps
        console.log(
            `https://www.google.com/maps/@${latitude},${longitude}`
        );

Displaying a map using Leaflet Library
    Open-source JS library for mobile-friendly interactive maps
        const coords = [latitude, longitude];
        const map = L.map('map').setView(coords, 13);                       // 13: zoom
        L.tileLayer(
            'https://{s}.tile.openstreetmap.fr/hot/{z}/{x}/{y}.png',        // Exists a lot of styles, we can Google it
            {
                attribution:
                    '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors',
            }
        ).addTo(map);
        L.marker(coords)
            .addTo(map)
            .bindPopup('A pretty CSS3 popup.<br> Easily customizable.')
            .openPopup();

Displaying a map marker
    With the Leaflet library we can add an Event Listener to interact with the map
        map.on("click", function (PARAMETER) {} );
    Adding the marker in the map
        map.on('click', function (mapEvent) {
            // console.log(mapEvent);
            const { lat, lng } = mapEvent.latlng;
            L.marker([lat, lng])
                .addTo(map)
                .bindPopup(
                    L.popup({
                        maxWidth: 250,
                        minWidth: 100,
                        autoClose: false, // Set it to false if you want to override the default behavior of the popup closing when another popup is opened.
                        closeOnClick: false, // Set it if you want to override the default behavior of the popup closing when user clicks on the map.
                        className: 'running-popup',
                    })
                )
                .setPopupContent('Workout!')
                .openPopup();
        });

Working with local storage
    API provide by the browser to save data
    Very simple API, it is only advised to use for small amounts of data.
    Structure
        localStorage.setItem( KEY, VALUE )
        localStorage.setItem( NAME, STRING )
        localStorage.setItem('workouts', JSON.stringify(this.#workouts));
        localStorage.getItem( KEY )
        localStorage.getItem( NAME )
        const data = localStorage.getItem('workouts');
    Convert any object to string
        JSON.stringify()
        JSON.stringify(this.#workouts)
    Convert a string into an object
        JSON.parse()
        const data = JSON.parse(localStorage.getItem());
    When we convert objects to string and later convert this string to object, we lost the prototype chain. NO __proto__ parents, only __proto__ Object
    Remove string from localStorage
        localStorage.removeItem( KEY );
        localStorage.removeItem('workouts');
    localStorage is blocking


---------------------- ASYNCHRONOUS JS: PROMISES; ASYNC/AWAIT AND AJAX ----------------------

Asynchronous JS, Ajax and APIs
    Synchronous
        Most code is synchronous
        Synchronous code is executed line by line
        Each line of code waits for previous line to finish
        Long-running operations BLOCK code execution.
        Example:
            alert("Text")
            The code is blocked until we press the button of the alert
            console.log("button pressed!")
    Asynchronous
        Asynchronous code is executed after a task that runs in the “background” finishes
        Asynchronous code is NON-BLOCKING
        Execution doesn’t wait for an asynchronous task to finish its work
        Callback functions alone do NOT make code asynchronous
            Only certain functions (as setTimeout) work in a asynchronous way
        Async work very well for coordinating behavior of a program over a period of time
        Example:
            Loading a photo is asynchronous, because the code can't wait until the photo is loaded
            qs(".imagen").src = "dog.jpg"
    What are AJAX calls
        AJAX: Asynchronous JavaScript And XML
        Allows us to communicate with remote web servers in an asynchronous way
        With AJAX calls, we can request data from web servers dynamically.
        How it works (Request-response model or Client-server architecture)
            Client          -- Request (asking for some data. get/post/etc.) ---->  Web Server
            (e.g: browser)  -- Response (sending data back) --------------------->  (usually an API)
    What is an API
        API: Application Programming Interface
        Piece of software that can be used by another piece of software, in order to allow applications to talk to each other
        There are be many types of APIs in web development
            DOM API
            Geolocation API
            Own Class API
            "Online" API
        “Online” API: Application running on a server, that receives requests for data, and sends data back as response
            Just "API" or "Web API"
        We can build our own web APIs (requires back-end development, e.g. with node.js) or use 3rd-party APIs
            There is an API for everything
        API data formats
            No API uses XML data anymore
            The term AJAX is just and old name
    ----->  Most API these days use the JSON data format

Our first Ajax call: xmlHttpRequest
    Is an old school call
    Structure
        const request = new XMLHttpRequest();
        request.open("GET", STRINGOFAPI)
        request.open('GET', 'https://restcountries.eu/rest/v2/name/spain');
        request.send();
    Is necesary know that it exists for the future.
    IS good to see how AJAX calls used to be handled with events and callback functions

How the web works: requests and responses (Page 204)
    Request-response model or Client-server architecture
                                            ---- 3. HTTP Request            ---->
        1. DNS  <-- DNS Lookup  --> Client  <-- 2. TCP/IP socket connection ---->  Web Server
                                            <---- 4. HTTP Response          ----
    Address example
        https://restcountries.eu/rest/v2/alpha/
        https://            ===> Protocol HTTP or HTTPS. HTTPS is encrypted using TLS or SSL
        restcountries.eu    ===> Domain name
        /rest/v2/alpha/     ===> Resource
    Real IP address example
        https://104.27.142.889:443
        https://            ===> Protocol (HTTP or HTTPS)
        104.27.142.889      ===> IP adress
        :443                ===> Port number (default 443 for HTTPS, 80 for HTTP)
    How it works
        1. Make a request to a DNS
            The domain name is NOT the real name access of the website
            The DNS will convert the domain to the real IP address
            https://restcountries.eu/rest/v2/alpha/     ===> https://104.27.142.889:443
            When the real IP address has been sent back to the browser, it is possible to call it.
        2. The TCP/IP socket connection is established between the browser and the server
            TCP is the Transmission Control Protocol
            IP is the Internet Protocol
            So, TCP/IP is the conexion protocol that define how data travels across the web
        3. HTTP request
            Hypertext Transfer Protocol. Another comunication protocol
            HTTP allows clients and web servers to communicate
            Works sending request and response messages from client to server and back
            Example:
                GET /rest/v2/alpha/PT HTTP/1.1
                    ===> Start line(most important line): HTTP method + request target + HTTP version
                Host: www.google.com
                User-Agent: Mozilla/5.0
                Accept-Language: en-US
                    ===> HTTP request headers (many different possibilities)
                <BODY>
                    ===> Request body (only when sending data to server, e.g. POST)
        4. HTTP Request
            Example
                HTTP/1.1 200 OK
                    ===> Start line: HTTP version + status code + status message. (Success or Fail)
                Date: Fri, 18 Jan 2021
                Content-Type: text/html
                Transfer-Encoding: chunked
                    ===> HTTP response headers (many different possibilities)
                <BODY>
                    ===> Response body (most responses). JSON data or HTML of the web page
        5. If the response bring us the HTML of the web
            1. index.html is the first to be loaded
            2. Scanned for assets: JS, CSS, images
            3. Process is repeated for each file
    TCP/IP
        TCP break the requests and responses down into thousands of small chunks called packets before they are sent
            Break the packets, make the communication more fast
        Once the small packets arrive at their final destination, TCP will reassemble all the packets into the original request or response
        IP ensures that the packets arrives at the destination they should go using IP addresses on each packet

Wellcome to callback hell
    Sequence of AJAX calls, the second runs only after the first one has finished
    Callback hell is when we have a lot of nested callbacks in order to execute async tasks in sequence
    Example of callback hell
        setTimeout(() => {
            console.log('1 second passed');
            setTimeout(() => {
                console.log('2 seconds passed');
                setTimeout(() => {
                    console.log('3 seconds passed');
                    setTimeout(() => {
                        console.log('4 seconds passed');
                        setTimeout(() => {
                            console.log('5 seconds passed');
                        }, 1000);
                    }, 1000);
                }, 1000);
            }, 1000);
        }, 1000);
    As a chain of the same function, it has the shape of a triangle.
    The problem with callback hell is that
        It makes our code look very messy.
        It makes our code harder to maintain ==> hard to understand ==> more bugs
    Escaping callback hell ===> using promises

Promises and the fetch API
    Fetch API
        Structure
            const NAME = fetch('URL');
            const request = fetch('https://restcountries.eu/rest/v2/name/spain');
    What is promises?
        Promise: A container for a future value.
            Example: Response from AJAX call
        Example:
            I buy lottery ticket(promise) right now
            Lottery draw happens asynchronously
            If correct outcome,I receive money, because it was promised
        We no longer need to rely on events and callbacks passed into asynchronous functions to handle asynchronous results.
            The first promise is show first, the second promise is show second, etc
        Instead of nesting callbacks, we can chain promises for a sequence of asynchronous operations: escaping callback hell
    Summary
        We create a variable with no data.
        The make a petition to the server for data ====> the promise
        When the promise is complete, we receive the response of the promise
        The variable created has now value
    The promise lifecycle
                                        ----> Fullfilled
        Pending --Async task--> Settled 
                                        ----> Rejected
        Pending: Before the future value is available.      Example: the lottery ticket is buy
        Settled: Asynchronous task has finished.            Example: a number is assigned to the lottery
        Fullfilled: Success! The value is now available.    Example: We win the lottery
        Rejected: An error happened.                        Example: We don't win the lottery
    Normally we build a promise and consume this promise, but sometimes we wan't to build a promise but NO consume this promise

Consuming promises
    Structure
        REQUEST.then( function (FULLFILLEDorREJECTED) {} )
        REQUEST.then(function( response ){return response.json();}).then(function (data) { renderCountry(data[0]) });
        REQUEST=PROMISE.then=PROMISE.then=PROMISE.etc
    Simplified and clean same code
        const NAME = function (PARAMETERS) {
            fetch("URL")
                .then(response => response.json())
                .then(data => LOGIC);
        };
        const getCountryData = function (country) {
            fetch(`https://restcountries.eu/rest/v2/name/${country}`)
                .then(response => response.json())
                .then(data => renderCountry(data[0]));
        };

Handling rejected promises
    Two ways to handling rejections
    1.- Pass a second callback function into the "then method"
        fetch('URL').then( NORMALFUNCTION(){}, SECONDFUNCTION(){})
        fetch(`https://restcountries.eu/rest/v2/name/${country}`).then(
            response => response.json(),        // Normal Function
            err => alert(err)                   // Second Function
        )
        If the NormalFunction trigger, the SecondFunction NOT trigger
        If the NormalFunction give an error, the SecondFunction trigger
        The error dissapear to the console and it is "catch the error" in the second function
        We need to put the SecondFunction in each "then method"
            fetch().then(NORMALFUNCTION(){}, SECONDFUNCTION(){}).then(NF, SC).then(NF, SC).then(NF, SC).then(NF, SC)
    2.- Catch the error in the end of the chaining promises
        fetch().then().then().then().then().then().catch()
        fetch().then().then().then().then().then().catch( err=>alert(err) )
    Finally method
        No mather what happen to the promise response, this method allways trigger
        fetch().then().then().then().then().then().catch().finally()
        then method trigger then promise is Fullfilled and catch trigger when promise is rejected
    --> ALWAYS USE CATCH()

Throwing errors manually
    When cannot find the URL
        The promise still Fullfilled ==> no rejection ==> not catch method trigger
    Is necesary to create error functions to catch it
        fetch()
        .then(response => {
            if (!response.ok)
                throw new Error( // Error wich is catched by "catch()"
                    `Country "${country}" not found (${response.status})`
                );
            return response.json();
        })
        .then().then().catch()
    Necesary catching this types of errors to show the user that an error has occurred
    Necesary catching this types of errors because is a bad practice to leave this rejected promises
    --> ALWAYS USE CATCH()
    If we create a helper function, we don't to write again and again response.json() and the catching manually error

Asynchronous behind the scenes: The event loop (page 212)
    Promises have priority over the callback queue. Even if the promises have been written after.
    We remember the JS
        JS engine: “Heart” of the runtime
            Heap: Where object are stored in memory
            Call Stack: Where code is actually executed --> Only ONE thread of execution. No multitasking!
        Callback queue: Ready-to-be-executed callback functions (coming from events)
            Call Stack <-> Callback queue ==> Event Loop: Sends callbacks from queue to call stack
        Web API: APIs provided to the engine
    Microtask queue: Like callback queue, but for callbacks related to promises. Has priority over callback queue!
    How it work?
        1. Callback start with one queue
            Callback Queue
                a. Queue of function 1 <==1==
                b. Queue of function 2
                c. Queue of function 3
            Microtask Queue
        2. Callback finished one queue
            Callback Queue
                a. Queue of function 2
                b. Queue of function 3
            Microtask Queue
                a. fetch(URL)
        3. JS check the microtask queue if exists code and priorice it
            Callback Queue
                a. Queue of function 2
                b. Queue of function 3
            Microtask Queue
                a. fetch(URL) <==1==
                b.  fetch(URL) <==2==
        4. Once finished all the list of microtask queue, the Callback Queue is executed again, repeating the process

Building a simple promise
    Structure
        const NAME = new Promise( EXECUTORFUNCTION (RESOLVE, REJECT) {
           if(){
                resolve(FULLFILLVALUEconsumedByTHENmethod)
            } else{
                reject(REJECTVALUEcatchByCATCHmethod)
            }
        });
        NAME.then().catch()
        const lotteryPromise = new Promise(function (resolve, reject) {
            if (Math.random() > 0.5) {
                resolve('You win!');
            } else {
                reject(new Error('You lost your money'));
            }
        });
        lotteryPromise
            .then(res => console.log(res))                  // value of resolve()
            .catch(err => console.log(`Error: ${err}`));    // value of reject()
        This is NOT async yet, we can simulate with a timer
    Promisifying
        In real world most of the time we consume promises
        We usually only built promises to basically wrap old callback based function into promises
        Promisifying: convert callback based async behaviour to promise based
    Creating a fullfilled or rejected promise that trigger inmediately
        Promise.resolve()
        Promise.resolve('Inmediatelly').then(x => console.log(x));
        Promise.reject()
        Promise.reject('Inmediatelly').then(x => console.log(x)).catch(y => console.log(`Error: ${y}`));

Consuming promises with async/await
    Since ES2017 is even better and easier way to consume promises, which is called sync await
    Async function
        Keep running in the background while performing the code that inside of it
        Wait for the resulto of the promise (await)
        const NAME = async function(){
            await fetch();
        }
        const whereAmIAwait = async function (country) {
            const res = await fetch(`https://restcountries.eu/rest/v2/name/${country}`);
        };
    No block the execution. It is possible to stop the code inside the async function, but the async not block the normal code.
    The Async/await show different but, behind the scenes, it is using promises
        const res = await fetch(`https://restcountries.eu/rest/v2/name/${country}`);
        console.log(res);
        Same than
        fetch(`https://restcountries.eu/rest/v2/name/${country}`).then(res => console.log(res) );
        But we can save the values(fetch) into propierties(res)
    We use "await" to wait for the promise, when the promise give us a value, await trigger
        const whereAmIAwait = async function (country) {
            const res = await fetch(`https://restcountries.eu/rest/v2/name/${country}`);            // Await 1
            const data = await res.json();                                                          // Await 2
        };
    Complete example
        const whereAmIAwait = async function () {
            const pos = await getPostionAwait();    <====
            const { latitude: lat, longitude: lng } = pos.coords;
            const resGeo = await fetch(`https://geocode.xyz/${lat},${lng}?geoit=json`);     <====
            const dataGeo = await resGeo.json();    <====
            const res = await fetch(
                `https://restcountries.eu/rest/v2/name/${dataGeo.country}`
            );
            const data = await res.json();      <====
            renderCountry(data[0]);
        };
    Exist the problem that if we have an error in one "await"(), we get a cascade of errors by the following "awaits"
        Error handling with try/catch

Error handling with try/catch
    Structure
        try{
            logic
        } catch (ERR) {
            logic error
        }
        try {
            let y = 1;
            const x = 2;
            x = 3;
        } catch (err) {
            console.error(err.message);
        }
    When we use try/catch the code continue, but if we no use try/catch the code block
        Without
            let y = 1;
            const x = 2;
            x = 3;
            cl("Show")
            Resultado:
                Error
        With
            try{same}catch(err){cl(err)}
            cl("Show")
            Resultado:
                Error
                Show

Returning values from async functions
    Not return the string that we want because when JS read this line, trigger the promise and continue with the code
        const city = whereAmIReturn()
        console.log(city);
    Now yes return us the string because "then method" only trigger after the async function
        whereAmIReturn().then(city => console.log(city));
    If any error occurs in the try block, the return string will never be reached because the code the code will jump to catch block
    Even though there was an error in the async function, the promise that this function returns is still fullfilled and no rejected
        whereAmIReturn().then(city => console.log(city)).catch(err => console.error(err))
        No trigger the console.error(err) trigger the console.log(city)
    So, is necesary to rethrow the error in catch block
        try{}
        catch (err){
            throw err
        }
        And now works the console.error(err)
        whereAmIReturn().then(city => console.log(city)).catch(err => console.error(err))
    Changin the "then" and "catch" methods
        (async function () {
            try {
                const city = await whereAmIReturn();
                console.log(`2: ${city}`);
            } catch (err) {
                console.error(`2: ${err.message}`);
            }
            console.log('3: Finished getting location');
        })();

Running promises in parallel
    Working one by one
        const [data1] = await getJSON(
            `https://restcountries.eu/rest/v2/name/${c1}`
        );
        const [data2] = await getJSON(
            `https://restcountries.eu/rest/v2/name/${c2}`
        );
        const [data3] = await getJSON(
            `https://restcountries.eu/rest/v2/name/${c3}`
        );
        The data3 wait for data2 and data2 wait for data1
    Parallel async running
        await Promise.all(PROMISE1, PROMISE2, PROMISE3)
        const data = await Promise.all([
            getJSON(`https://restcountries.eu/rest/v2/name/${c1}`),
            getJSON(`https://restcountries.eu/rest/v2/name/${c2}`),
            getJSON(`https://restcountries.eu/rest/v2/name/${c3}`),
        ]);
        console.log(data.map(d => d[0].capital));
    When one have an error, Promise.all() reject all an error

Other promise combinators: race, allsettled and any
    Promise.race()
        Receive an array of promises and return a promise settled as soon as one of the input promises settles. No matter if is fullfilled or reject
        Settle: means that a value is avaiable, not matter if the promise is rejected of fullfilled
    --> Promise.all() and Promise.race() are the MOST important promise combinators
        Structure
            await Promite.race([racer1, racer2, racer3,etc])
            const res = await Promise.race([
                getJSON(`https://restcountries.eu/rest/v2/name/japan`),
                getJSON(`https://restcountries.eu/rest/v2/name/usa`),
                // getJSON(`https://restcountries.eu/rest/v2/name/canadaassda`), // If one is rejected, all be rejected
                getJSON(`https://restcountries.eu/rest/v2/name/canada`),
            ]);
        Very usefull to prevent against never ending promises or very long running promises(bad 3g)
            const timeout = function (seconds) {
                return new Promise(function (_, reject) {
                    setTimeout(function () {
                        reject(new Error('request took to loong!'));
                    }, seconds);
                });
            };
            Promise.race([
                getJSON(`https://restcountries.eu/rest/v2/name/japan`),
                getJSON(`https://restcountries.eu/rest/v2/name/usa`),
                timeout(0.25),
            ]);
            When 0.25 seconds have been passed, the timeout complete and the race trigger into the timeout
    Promise.any()
        Since ES2021
        Receive an array of promises and return the first fullfilled promise, ignore the rejected promises
        Very similar to Promise.race() but ignoring the rejected
        Structure
            Promise.any([
                // Just an example of how works
                Promise.reject('NOT Success'),
                Promise.resolve('Success 1'),
            ])                                      // Resultado: Success 1
            Promise.race([
                // Just an example of how works
                Promise.reject('NOT Success'),
                Promise.resolve('Success 1'),
            ])                                      // Resultado: NOT Success
    Promise.allSettled()
        Since ES2020
        Receive an array of promises and return an array of all other promises. No matter if fullfilled or rejected
        Similar to Promise.all()
            Promise.all() will short circuit as soon as one promise rejects
            Promise.allSettled() never short circuit
        Structure
            Promise.allSettled([
                // Just an example of how works
                Promise.resolve('Success'),
                Promise.resolve('Success'),
                Promise.reject('NOT Success'),
                Promise.resolve('Success'),
            ])                                          // trigger all and return the 4
            Promise.all([
                // Just an example of how works
                Promise.resolve('Success'),
                Promise.resolve('Success'),
                Promise.reject('NOT Success'),
                Promise.resolve('Success'),
            ])                                          // Error, stop triggering. NOT show nothing
    

---------------------- MODERN JAVASCRIPT DEVELOPMENT: MODULES AND TOOLING ----------------------

An overview of modern JS development
    In the past, we used to write all our code into one big script or maybe multiple scripts
    Today, we divide our projects intro multiple modules
        This modules can share data between them and make our code more organized and maintainable
        We can include 3rd party modules(called packages) into our own code
    How it works?
        Development
            modules
            3rd-party modules
        Build process
            Building: Join all modules into one file. Eliminate unused code and compress our code.
                Older browsers don't support modules
                Better for performance
            Transpiling/polyfilling: Convert modern JavaScript back to ES5
                Using a tool called "Babel"
        JS bundle
    npm repository
        Node package manager (originary for NodeJS but today is for all packages)
        Contains open-source packages to include 3rd-party code in our own code. Development
            NPM is the repository in which packages live
            NPM is a program that we use on our computers to install and manage this packages
            Examples: React, jQuery, Leaflet, etc.
        Contains development tools that help build our applications. Build process
            Most common Build tools are "webpack"(more used) and "Parcel"(more easy use and more friendly)
            Take our raw code and transform it into a JS bundle
            Examples: live-server, Parcel, Babel, etc.

An overview of modules in JS
   An overview of modules in general
        Reusable piece of code that encapsulates implementation details.
        Usually a standalone file, but it doesn’t have to be.
        Have imports and exports
            Other modules from which we import are called dependencies of the importing module. 
                Cannot work without the code from the external module
            Public API
                Exposed code for other codes to consume
        Example
            import { rand } from './math.js'        // Import ==> Dependency
            const diceP1 = rand(1,6,2)              // Module code
            const diceP2 = rand(1,6,2)              // Module code
            const scores = { diceP1, diceP2 }       // Module code
            export { scores }                       // Export ==> Public API
        Why modules?
            Compose software: Modules are small building blocks that we put together to build complex applications
            Isolate components: Modules can be developed in isolation without thinking about the entire codebase
            Abstract code: Implement low-level code in modules and import these abstractions into other modules
            Organized code: Modules naturally lead to a more organized codebase
            Reuse code: Modules allow us to easily reuse the same code, even across multiple projects
    Native JS (ES6) modules
        JS has a native built-in module system
        Modules stored in files, exactly one module per file.
        Differences into old JS (scripts) and modern JS (ES6 modules)
                                        ES6 module                      Script
            Top-level variables         Scoped to module (privates)     Global
            Default mode                Strict mode                     “Sloppy” mode
            Top-level this              undefined                       window
            Imports and exports         YES                             NO
                                        Need to happen at top-level. Imports are hoisted!
            HTML linking                <script type="module">          <script>
            File downloading            Asynchronous                    Synchronous
    How ES6 modules are imported
        We use an example to understand
        Example (index.js):
            import { rand } from './math.js'
            import { showDice } from './dom.js'
            const dice = rand(1,6,2)
            showDice(dice)
        1. Parsing index.js
            Parsing: read the code but without executing it
        2. Importing modules before execution
            Modules are imported synchronously
                Only after all imported modules have been downloaded and executed the main index.js module will be executed.
            Possible thanks to top-level (“static”) imports, which make imports known before execution
            This makes bundling and dead code elimination possible
        3. Asynchronous downloading math.js and dom.js
            math.js
                const rand = () => { randon numbers }
                export { rand }
            dom.js
                const showDice = () => { display dice }
                export { showDice }
        4. Linking imports to math.js and dom.js exports
            Live connection, NOT copies, like a pointer
            rand is the same into math.js and index.js
            showDice is the same into dom.js and index.js
            If we change the value of rand into math.js, the value of rand into index.js also change
            If we change the value of showDice into index.js, the value of showDice into dom.js also change
            --> Important to understand, unique to ES6 modules
        5. Execution math.js and dom.js
        6. Execution index.js

Exporting and importing in ES6 modules
    Put in HTML the type
        <script type="module" defer src="script.js"></script>
    Import the extra module
        import './shoppingCart.js';
        import './shoppingCart';        // ES modules works without the extension
    The imports are executed first, before the code
        cl("Not imported")
        import './shoppingCart.js'; // With cl("Imported")
        Resultado:
            Imported
            Not imported
        This is the reason why we write the imports at the top of the file.
    The scope in modules are private, this is the reason why we cannot do
        import './shoppingCart.js';     // With const codigo = 10
        cl(codigo)                      // Resultado: Error
        But, we can use it with exports
    Named Exports
        Simplest way of exporting because we only put "export" in front of we want to export
        export const codigo2 = 10
        export { totalPrice, totalQuantity };
            We can change the name of the import
            export { totalPrice as price, totalQuantity };
        Example
            import {codigo2, price, totalQuantity as tq} from './shoppingCart.js';
            cl(codigo2)                 // Resultado: 10
            cl(price, totalQuantity)
        Import all the modules at the same time
            import * as ShoppingCart from './shoppingCart';
                ShoppingCart is like a Class.
            ShoppingCart.addToCart('bread', 5);
            const importando = ShoppingCart.totalPrice;
                console.log(importando);
    Default Exports
        We use when we only want to export one thing per module ==> default
            export default VALUE
            export default function () { LOGIC };
            export default totalPrice
        Is necesary to give it a name to the value when we import it
            import add from "./"
    Importing named and default exports at the same time
        import DEFAULT, {NAMED} from "./"
        import add, {} from "./"
        In practice we NEVER mixed default and named exports in the same module
        Use named export or default exports dependind the situation but never mixed in the same module
    Pointing the variables
        In shoppingCart cart is empty. cart = []
        import {addToCart, cart} from "./shoppingCart.js"
        addToCart("bread", 2)
        addToCart("pizza", 5)
        cart variable is modified in script.js and shoppingCart.js because both are pointing to the same variable
        cl(cart)

CommonJS modules
    Exists different module system, and CommonJS is particulary important in the world of JS
    Have been used in NodeJS
    All the modules still use the CommonJS system ===> npm was intended for NodeJS
    One file is one module
    How it seems (not work in the browser, but yes in NodeJS)
        Export
            export.
            export.addToCart = function (product, quantity) {
                cart.push({ product, quantity });
                console.log(`${quantity} ${product} added to cart`);
            };
        Import
            require('URL')
            const { addToCart } = require('./shoppingCart.js')

A brief introduction to the command line (terminal always in unix: mac and linux)
    Show directory
        ls
    Change directory
        Down: "cd NAMEFOLDER"
        Up: "cd .." "cd ../.."
    Create Folder
        mkdir NAME
        mkdir proyecto
    Create Files
        touch NAME.EXTENSION
        touch index.html
        touch colors.css script.js modules.js
    Delete Files
        rm NAME.EXTENSION
        rm modules.js
    Move Files
        mv NAME.EXTENSION LOCATION
        move colors.css ../otroprojecto
    Delete Folder
        rmdir NAME          For empty folders
        rmdir otroprojecto
        rm -R NAME          For all folders
        rm -R proyecto

Introduction to NPM
    Version
        npm -v
    Initialize
        npm init
        Write the propierties or press enter for default values
        Create a JSON file: file which save the configutarion of our project
    Installing libraries using npm
        See the documentation of the library
        npm install PACKAGENAME
        npm i PACKAGENAME
        NPM create a new line in the JSON and create a folder called "node_modules" which the libraries
    Lodash
        Library with a ton of useful functions for arrays, objects, functions, dates and more
        npm i lodash        // CommonJS modules (necesary to use a module bundler to use it)
        npm i lodash-es     // Without CommonJS
    If we want to move our project to another computer or share our project we NEVER shave the folder "node_modules".
        The JSON can install the packages automatically
        npm i
        Without packages names

Bundling with PARCEL and NPM scripts
    Bundle different bundles together. Different JS files into only one
    Install Parcel
        npm i parcel --save-dev
        npm i parcel-bundler --save-dev
        devDependency is like a tool that we need to build our application, but is not a dependency that we include in our code
    Parcel is another Command Line Interface ===> Terminal
    We can use NPX or NPM scripts
    Hot module replacement
        if (module.hot) { module.hot.accept() }
        Only readable by Parcel, not include into final bundle
        When we change one of the modules (trigger a rebuild), trigger the action but without all the page reload
        The page not reload, only apply the changes
    Not necesary to write all the URL for the libraries, PARCEL fount it
        import cloneDeep from './node_modules/lodash-es/cloneDeep.js';
        import cloneDeep from 'lodash-es';
    NPX
        npx parcel index.html
        Parcel create a live-server, a folder "dist" an a folder ".parcel-cache"
        The code in folder "dist" is the code that we will sent to our final users
            Unused code still in the file, we delete it later
    NPM Scripts
        Is the form that is more used
        Allow us to automate repetitive tasks
        In the file JSON of the NPM, in the scripts we write
            "start": "parcel index.html"
        In the terminal we write
            npm run start
        Do it the same thing than NPX but with a simple command
    Build the final bundle, compress and delete code unused. We need a parcel command and we added to the script NPM
        "build": "parcel build index.html"
        In the terminal we write
        npm run build
        The html file is compressed
        The js files is compressed
    Install packages globally
        NPM i parcel -g PACKAGENAME
        For example, the live-server was installed with this mode and work on all the folders that we work
        Is recomendable install the packages locally, to have allways the latests version

Configuring BABEL and Polyfilling
    Transpile: transform supermodern code back to ES5 code
    Parcel automatically uses BABEL to transpile our code
    BABEL only transpile ES6 syntax
        arrow functions, classes, const, spread operator, etc
    But cannot convert ES6 new features added to the language
        find, Promises
    This new features can simply NOT BE TRANSPILE but it is possible to polyfilling
    Polyfilling
        Recreate defined function and make it avaible in this bundle so that the codes can then use it
    The best option is to install a library called "core-js"
        npm i core-js
        import 'core-js';
        This import all the features, so is better to import only the core-js new features that we are using
        import "core-js/stable/array/find"
    Is necesary to install another package called "regenerator-runtime" to polyfilling async functions
        npm i regenerator-runtime
        import 'regenerator-runtime/runtime'

Review: writing clean and modern JS
    Ceadable code
        Write code so that others can understand it
        Write code so that you can understand it in 1 year
        Avoid too “smart” and overcomplicated solutions
        Use descriptive variable names: what they contain
        Use descriptive function names: what they do
    General
        Use DRY principle (refactor your code)
        Don’t pollute global namespace, encapsulate instead
        Don’t use var
        Use strong type checks (=== and !==)
    Functions
        Generally, functions should do only one thing
        Don’t use more than 3 function parameters
        Use default parameters whenever possible
        Generally, return same data type as received. Example: receive 2 o 3 numbers, return a number.
        Use arrow functions when they make code more readable
    OOP
        Use ES6 classes
        Encapsulate data and don’t mutate it from outside the class
        Implement method chaining
        Do not use arrow functions as methods (in regular objects)
    Avoid nested code (functions into functions into functions...)
        Use early return (=guard clauses)
            if (!id) return;
        Use ternary (conditional) or logical operators instead of if
        Use multiple if instead of if/else-if
        Avoid for loops, use array methods instead
        Avoid callback-based asynchronous APIs
    Asynchronous code
        Consume promises with async/await for best readability
        Whenever possible, run promises in parallel (Promise.all)
        Handle errors and promise rejections

Declarative and Functional JS principles
    Two fundamentally different ways of writing code (paradigms): Imperative and Declarative
    Imperative
        Programmer explains “HOW to do things”
        We explain the computer every single step it has to follow to achieve a result
        Example: Step-by-step recipe of a cake
        Code
            const arr = [2, 4, 6, 8];
            const doubled = [];
            for (let i = 0; i < arr.lenght; i++)
                doubled[i] = arr[i] *2;
    Declarative
        Programmer tells “WHAT do do”
        We simply describe the way the computer should achieve the result
        The HOW (step-by-step instructions) gets abstracted away
        Example: Description of a cake ==> The person go to step-to-step to make the cake
        Code
            const arr = [2, 4, 6, 8];
            const doubled = arr.map(n => n * 2)
    Functional programming principles
        Declarative programming paradigm
        Based on the idea of writing software by combining many "pure functions", avoiding "side effects" and avoiding "mutating" data
            Side effect: Modification (mutation) of any data outside of the function (mutating external variables, logging to console, writing to DOM, etc.)
            Pure function: Function without side effects. Does not depend on external variables. Given the same inputs, always returns the same outputs.
            Immutability: State (data) is never modified! Instead, state is copied and the copy is mutated and returned.
                Object.freeze()
                const arr = Object.freeze({name: "Jose", age: "23"})
        Examples
            React
            Redux
    Functional programming techniques
        Try to avoid data mutations
        Use built-in methods that don’t produce side effects
        Do data transformations with methods such as .map(), .filter() and .reduce()
        Try to avoid side effects in functions: this is of course not always possible!
    Declarative syntax
        Use array and object destructuring
        Use the spread operator (...)
        Use the ternary (conditional) operator
        Use template literals


---------------------- FORKIFY APP: BUILDING A MODERN APPLICATION ----------------------

The MVC architecture
    Why worry about architecture?
        STRUCTURE ==> Like a house, software needs a structure: the way we organize our code
        MAINTAINABILITY ==> A project is never done! We need to be able to easily change it in the future
        EXPANDABILITY ==> We also need to be able to easily add new features
        Triangle of architecture
                        Structure
                The perfect architecture
            Maintainability     Expandability
        We can create our own architecture (Mapty project). Easy projects
        We can use a well-established architecture pattern like MVC, MVP, Flux, etc. (this project). More complex projects
        We can use a framework like React, Angular, Vue, Svelte, etc. Big projects and modern JS
    Components
        Business Logic
            Code that solves the actual business problem
            Directly related to what business does and what it needs
            Example: sending messages, storing transactions, calculating taxes...
        State
            Essentially stores all the data about the application
            Should be the “single source of truth”
            UI should be kept in sync with the state < Keeping in sync with <--> >
            State libraries exist ( Redux, MobX)
        HTTP Library
            Responsible for making and receiving AJAX requests
            Optional but almost always necessary in real-world apps
        Application Logic (Router)
            Code that is only concerned about the implementation of application itself
            Handles navigation and UI events
        Presentation logic (UI layer)
            Code that is concerned about the visible part of the application
            Essentially displays application state < <--> Keeping in sync with >
    The Model View Controller (MVC) architecture
        Model
            Business logic
            State
            HTTP library
        Controller
            Application logic
                Bridge between model and views (which don’t know about one another)
                Handles UI events and dispatches tasks to model and view
        View
            Presentation logic
        Example of a flow of actions and data (click)
            Web <__3__> Model   <--2--- Controller  ---2--> View __5__> User
                                ___4__>             ___4__>
                (--> Connected by function call and import)
                (__> Data flow)
            0. Clicking
            1. Controller handdle the click event
            2. Update the user interface and ask the model for data
            3. Might involve doing and AJAX request to the web
            4. When the data arrives, the controller takes the data and sends it to the view
            5. The view will render that data to the user interface

Event handling in MVC: Publisher-Suscriber pattern
    Design patterns in programming
        Standards solutions to certains kinds of problems
    Publisher: Code that knows when to react
    Suscriber: Code that wants to react
    Subscribe to publisher by passing in the subscriber function
        As soon as the program loads, the init function is called which in turn immediately calls the function from the view
    Events should be handled in the controller (otherwise we would have application logic in the view)
    Events should be listened for in the view (otherwise we would need DOM elements in the controller)

Writing documentation in JSDocs
    Easily understand what exactly the functional is doing
    URL
        https://jsdoc.app/
    Initialize
        /** */
    Writing
        /**
        * Description
        * @param {Object | Object[]} "parameter of data" ShortDescription       // Object or Array of objects
        * @param { TYPEparameter } render                                       // Parameter optional
        * @returns {undefined | string} A markup string is returned if render = false
        * ... much more options
        */
    If we put the mouse on functions, the JSDocs give us all the information


---------------------- Setting up GIT and deployment ----------------------

Simple deployment with netlify





